/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.607
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the CompositeVizItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompositeVizItem{}

// CompositeVizItem struct for CompositeVizItem
type CompositeVizItem struct {
	NodeName       string  `json:"node_name"`
	NodeId         string  `json:"node_id"`
	Label          string  `json:"label"`
	Data           VisData `json:"data"`
	VisualizerName string  `json:"visualizer_name"`
	ConnectionName string  `json:"connection_name"`
}

// NewCompositeVizItem instantiates a new CompositeVizItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompositeVizItem(nodeName string, nodeId string, label string, data VisData, visualizerName string, connectionName string) *CompositeVizItem {
	this := CompositeVizItem{}
	this.NodeName = nodeName
	this.NodeId = nodeId
	this.Label = label
	this.Data = data
	this.VisualizerName = visualizerName
	this.ConnectionName = connectionName
	return &this
}

// NewCompositeVizItemWithDefaults instantiates a new CompositeVizItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompositeVizItemWithDefaults() *CompositeVizItem {
	this := CompositeVizItem{}
	return &this
}

// GetNodeName returns the NodeName field value
func (o *CompositeVizItem) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *CompositeVizItem) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *CompositeVizItem) SetNodeName(v string) {
	o.NodeName = v
}

// GetNodeId returns the NodeId field value
func (o *CompositeVizItem) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *CompositeVizItem) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *CompositeVizItem) SetNodeId(v string) {
	o.NodeId = v
}

// GetLabel returns the Label field value
func (o *CompositeVizItem) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *CompositeVizItem) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *CompositeVizItem) SetLabel(v string) {
	o.Label = v
}

// GetData returns the Data field value
func (o *CompositeVizItem) GetData() VisData {
	if o == nil {
		var ret VisData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CompositeVizItem) GetDataOk() (*VisData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CompositeVizItem) SetData(v VisData) {
	o.Data = v
}

// GetVisualizerName returns the VisualizerName field value
func (o *CompositeVizItem) GetVisualizerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VisualizerName
}

// GetVisualizerNameOk returns a tuple with the VisualizerName field value
// and a boolean to check if the value has been set.
func (o *CompositeVizItem) GetVisualizerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VisualizerName, true
}

// SetVisualizerName sets field value
func (o *CompositeVizItem) SetVisualizerName(v string) {
	o.VisualizerName = v
}

// GetConnectionName returns the ConnectionName field value
func (o *CompositeVizItem) GetConnectionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionName
}

// GetConnectionNameOk returns a tuple with the ConnectionName field value
// and a boolean to check if the value has been set.
func (o *CompositeVizItem) GetConnectionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionName, true
}

// SetConnectionName sets field value
func (o *CompositeVizItem) SetConnectionName(v string) {
	o.ConnectionName = v
}

func (o CompositeVizItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompositeVizItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["node_name"] = o.NodeName
	toSerialize["node_id"] = o.NodeId
	toSerialize["label"] = o.Label
	toSerialize["data"] = o.Data
	toSerialize["visualizer_name"] = o.VisualizerName
	toSerialize["connection_name"] = o.ConnectionName
	return toSerialize, nil
}

type NullableCompositeVizItem struct {
	value *CompositeVizItem
	isSet bool
}

func (v NullableCompositeVizItem) Get() *CompositeVizItem {
	return v.value
}

func (v *NullableCompositeVizItem) Set(val *CompositeVizItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCompositeVizItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCompositeVizItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompositeVizItem(val *CompositeVizItem) *NullableCompositeVizItem {
	return &NullableCompositeVizItem{value: val, isSet: true}
}

func (v NullableCompositeVizItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompositeVizItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
