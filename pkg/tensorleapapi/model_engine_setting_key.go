/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.638
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// EngineSettingKey the model 'EngineSettingKey'
type EngineSettingKey string

// List of EngineSettingKey
const (
	ENGINESETTINGKEY_PROCESS_REQUIRED_CPU          EngineSettingKey = "PROCESS_REQUIRED_CPU"
	ENGINESETTINGKEY_PROCESS_LIMIT_CPU             EngineSettingKey = "PROCESS_LIMIT_CPU"
	ENGINESETTINGKEY_PROCESS_REQUIRED_MEMORY       EngineSettingKey = "PROCESS_REQUIRED_MEMORY"
	ENGINESETTINGKEY_PROCESS_LIMIT_MEMORY          EngineSettingKey = "PROCESS_LIMIT_MEMORY"
	ENGINESETTINGKEY_N_GPUS_PER_PROCESS            EngineSettingKey = "N_GPUS_PER_PROCESS"
	ENGINESETTINGKEY_N_GENERIC_PROCESS_PROCESSES   EngineSettingKey = "N_GENERIC_PROCESS_PROCESSES"
	ENGINESETTINGKEY_N_VISUALIZERS_PROCESSES       EngineSettingKey = "N_VISUALIZERS_PROCESSES"
	ENGINESETTINGKEY_KEEP_VISUALIZATION_RESOLUTION EngineSettingKey = "KEEP_VISUALIZATION_RESOLUTION"
	ENGINESETTINGKEY_DYNAMIC_MEMORY                EngineSettingKey = "DYNAMIC_MEMORY"
	ENGINESETTINGKEY_GENERIC_CPU_REQUEST           EngineSettingKey = "GENERIC_CPU_REQUEST"
	ENGINESETTINGKEY_GENERIC_CPU_LIMIT             EngineSettingKey = "GENERIC_CPU_LIMIT"
	ENGINESETTINGKEY_GENERIC_MEMORY_REQUEST        EngineSettingKey = "GENERIC_MEMORY_REQUEST"
	ENGINESETTINGKEY_GENERIC_MEMORY_LIMIT          EngineSettingKey = "GENERIC_MEMORY_LIMIT"
	ENGINESETTINGKEY_WARMUP                        EngineSettingKey = "WARMUP"
	ENGINESETTINGKEY_SLIM_JOB_CPU_REQUEST          EngineSettingKey = "SLIM_JOB_CPU_REQUEST"
	ENGINESETTINGKEY_SLIM_JOB_CPU_LIMIT            EngineSettingKey = "SLIM_JOB_CPU_LIMIT"
	ENGINESETTINGKEY_SLIM_JOB_REQUIRED_MEMORY      EngineSettingKey = "SLIM_JOB_REQUIRED_MEMORY"
	ENGINESETTINGKEY_SLIM_JOB_LIMIT_MEMORY         EngineSettingKey = "SLIM_JOB_LIMIT_MEMORY"
	ENGINESETTINGKEY_SLIM_JOB_TIME_TO_LIVE         EngineSettingKey = "SLIM_JOB_TIME_TO_LIVE"
	ENGINESETTINGKEY_PIP_INDEX_URL                 EngineSettingKey = "PIP_INDEX_URL"
	ENGINESETTINGKEY_PIP_EXTRA_INDEX_URL           EngineSettingKey = "PIP_EXTRA_INDEX_URL"
)

// All allowed values of EngineSettingKey enum
var AllowedEngineSettingKeyEnumValues = []EngineSettingKey{
	"PROCESS_REQUIRED_CPU",
	"PROCESS_LIMIT_CPU",
	"PROCESS_REQUIRED_MEMORY",
	"PROCESS_LIMIT_MEMORY",
	"N_GPUS_PER_PROCESS",
	"N_GENERIC_PROCESS_PROCESSES",
	"N_VISUALIZERS_PROCESSES",
	"KEEP_VISUALIZATION_RESOLUTION",
	"DYNAMIC_MEMORY",
	"GENERIC_CPU_REQUEST",
	"GENERIC_CPU_LIMIT",
	"GENERIC_MEMORY_REQUEST",
	"GENERIC_MEMORY_LIMIT",
	"WARMUP",
	"SLIM_JOB_CPU_REQUEST",
	"SLIM_JOB_CPU_LIMIT",
	"SLIM_JOB_REQUIRED_MEMORY",
	"SLIM_JOB_LIMIT_MEMORY",
	"SLIM_JOB_TIME_TO_LIVE",
	"PIP_INDEX_URL",
	"PIP_EXTRA_INDEX_URL",
}

func (v *EngineSettingKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EngineSettingKey(value)
	for _, existing := range AllowedEngineSettingKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EngineSettingKey", value)
}

// NewEngineSettingKeyFromValue returns a pointer to a valid EngineSettingKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEngineSettingKeyFromValue(v string) (*EngineSettingKey, error) {
	ev := EngineSettingKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EngineSettingKey: valid values are %v", v, AllowedEngineSettingKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EngineSettingKey) IsValid() bool {
	for _, existing := range AllowedEngineSettingKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EngineSettingKey value
func (v EngineSettingKey) Ptr() *EngineSettingKey {
	return &v
}

type NullableEngineSettingKey struct {
	value *EngineSettingKey
	isSet bool
}

func (v NullableEngineSettingKey) Get() *EngineSettingKey {
	return v.value
}

func (v *NullableEngineSettingKey) Set(val *EngineSettingKey) {
	v.value = val
	v.isSet = true
}

func (v NullableEngineSettingKey) IsSet() bool {
	return v.isSet
}

func (v *NullableEngineSettingKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngineSettingKey(val *EngineSettingKey) *NullableEngineSettingKey {
	return &NullableEngineSettingKey{value: val, isSet: true}
}

func (v NullableEngineSettingKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngineSettingKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
