/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.634
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the ScatterInsightBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScatterInsightBase{}

// ScatterInsightBase struct for ScatterInsightBase
type ScatterInsightBase struct {
	Type                         ScatterInsightType             `json:"type"`
	Filters                      []ScatterFilter                `json:"filters,omitempty"`
	NSamples                     float64                        `json:"n_samples"`
	MutualInfoElements           []MutualInformationElement     `json:"mutual_info_elements"`
	BlobPath                     string                         `json:"blob_path"`
	InsightSubCategoryDsCuration *InsightSubCategoryDSCuration  `json:"insight_sub_category_ds_curation,omitempty"`
	InsightCategoryPerformance   *InsightSubCategoryPerformance `json:"insight_category_performance,omitempty"`
	Severity                     float64                        `json:"severity"`
	SeverityMetrics              []SeverityMetricElement        `json:"severity_metrics"`
	MetricsInfo                  []InsightMetricInfo            `json:"metrics_info"`
	Index                        float64                        `json:"index"`
	MinHash                      []float64                      `json:"min_hash"`
	CsvPath                      *string                        `json:"csv_path,omitempty"`
}

// NewScatterInsightBase instantiates a new ScatterInsightBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScatterInsightBase(type_ ScatterInsightType, nSamples float64, mutualInfoElements []MutualInformationElement, blobPath string, severity float64, severityMetrics []SeverityMetricElement, metricsInfo []InsightMetricInfo, index float64, minHash []float64) *ScatterInsightBase {
	this := ScatterInsightBase{}
	this.Type = type_
	this.NSamples = nSamples
	this.MutualInfoElements = mutualInfoElements
	this.BlobPath = blobPath
	this.Severity = severity
	this.SeverityMetrics = severityMetrics
	this.MetricsInfo = metricsInfo
	this.Index = index
	this.MinHash = minHash
	return &this
}

// NewScatterInsightBaseWithDefaults instantiates a new ScatterInsightBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScatterInsightBaseWithDefaults() *ScatterInsightBase {
	this := ScatterInsightBase{}
	return &this
}

// GetType returns the Type field value
func (o *ScatterInsightBase) GetType() ScatterInsightType {
	if o == nil {
		var ret ScatterInsightType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetTypeOk() (*ScatterInsightType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ScatterInsightBase) SetType(v ScatterInsightType) {
	o.Type = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ScatterInsightBase) GetFilters() []ScatterFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []ScatterFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetFiltersOk() ([]ScatterFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ScatterInsightBase) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []ScatterFilter and assigns it to the Filters field.
func (o *ScatterInsightBase) SetFilters(v []ScatterFilter) {
	o.Filters = v
}

// GetNSamples returns the NSamples field value
func (o *ScatterInsightBase) GetNSamples() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.NSamples
}

// GetNSamplesOk returns a tuple with the NSamples field value
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetNSamplesOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NSamples, true
}

// SetNSamples sets field value
func (o *ScatterInsightBase) SetNSamples(v float64) {
	o.NSamples = v
}

// GetMutualInfoElements returns the MutualInfoElements field value
func (o *ScatterInsightBase) GetMutualInfoElements() []MutualInformationElement {
	if o == nil {
		var ret []MutualInformationElement
		return ret
	}

	return o.MutualInfoElements
}

// GetMutualInfoElementsOk returns a tuple with the MutualInfoElements field value
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetMutualInfoElementsOk() ([]MutualInformationElement, bool) {
	if o == nil {
		return nil, false
	}
	return o.MutualInfoElements, true
}

// SetMutualInfoElements sets field value
func (o *ScatterInsightBase) SetMutualInfoElements(v []MutualInformationElement) {
	o.MutualInfoElements = v
}

// GetBlobPath returns the BlobPath field value
func (o *ScatterInsightBase) GetBlobPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlobPath
}

// GetBlobPathOk returns a tuple with the BlobPath field value
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetBlobPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlobPath, true
}

// SetBlobPath sets field value
func (o *ScatterInsightBase) SetBlobPath(v string) {
	o.BlobPath = v
}

// GetInsightSubCategoryDsCuration returns the InsightSubCategoryDsCuration field value if set, zero value otherwise.
func (o *ScatterInsightBase) GetInsightSubCategoryDsCuration() InsightSubCategoryDSCuration {
	if o == nil || IsNil(o.InsightSubCategoryDsCuration) {
		var ret InsightSubCategoryDSCuration
		return ret
	}
	return *o.InsightSubCategoryDsCuration
}

// GetInsightSubCategoryDsCurationOk returns a tuple with the InsightSubCategoryDsCuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetInsightSubCategoryDsCurationOk() (*InsightSubCategoryDSCuration, bool) {
	if o == nil || IsNil(o.InsightSubCategoryDsCuration) {
		return nil, false
	}
	return o.InsightSubCategoryDsCuration, true
}

// HasInsightSubCategoryDsCuration returns a boolean if a field has been set.
func (o *ScatterInsightBase) HasInsightSubCategoryDsCuration() bool {
	if o != nil && !IsNil(o.InsightSubCategoryDsCuration) {
		return true
	}

	return false
}

// SetInsightSubCategoryDsCuration gets a reference to the given InsightSubCategoryDSCuration and assigns it to the InsightSubCategoryDsCuration field.
func (o *ScatterInsightBase) SetInsightSubCategoryDsCuration(v InsightSubCategoryDSCuration) {
	o.InsightSubCategoryDsCuration = &v
}

// GetInsightCategoryPerformance returns the InsightCategoryPerformance field value if set, zero value otherwise.
func (o *ScatterInsightBase) GetInsightCategoryPerformance() InsightSubCategoryPerformance {
	if o == nil || IsNil(o.InsightCategoryPerformance) {
		var ret InsightSubCategoryPerformance
		return ret
	}
	return *o.InsightCategoryPerformance
}

// GetInsightCategoryPerformanceOk returns a tuple with the InsightCategoryPerformance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetInsightCategoryPerformanceOk() (*InsightSubCategoryPerformance, bool) {
	if o == nil || IsNil(o.InsightCategoryPerformance) {
		return nil, false
	}
	return o.InsightCategoryPerformance, true
}

// HasInsightCategoryPerformance returns a boolean if a field has been set.
func (o *ScatterInsightBase) HasInsightCategoryPerformance() bool {
	if o != nil && !IsNil(o.InsightCategoryPerformance) {
		return true
	}

	return false
}

// SetInsightCategoryPerformance gets a reference to the given InsightSubCategoryPerformance and assigns it to the InsightCategoryPerformance field.
func (o *ScatterInsightBase) SetInsightCategoryPerformance(v InsightSubCategoryPerformance) {
	o.InsightCategoryPerformance = &v
}

// GetSeverity returns the Severity field value
func (o *ScatterInsightBase) GetSeverity() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetSeverityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *ScatterInsightBase) SetSeverity(v float64) {
	o.Severity = v
}

// GetSeverityMetrics returns the SeverityMetrics field value
func (o *ScatterInsightBase) GetSeverityMetrics() []SeverityMetricElement {
	if o == nil {
		var ret []SeverityMetricElement
		return ret
	}

	return o.SeverityMetrics
}

// GetSeverityMetricsOk returns a tuple with the SeverityMetrics field value
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetSeverityMetricsOk() ([]SeverityMetricElement, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeverityMetrics, true
}

// SetSeverityMetrics sets field value
func (o *ScatterInsightBase) SetSeverityMetrics(v []SeverityMetricElement) {
	o.SeverityMetrics = v
}

// GetMetricsInfo returns the MetricsInfo field value
func (o *ScatterInsightBase) GetMetricsInfo() []InsightMetricInfo {
	if o == nil {
		var ret []InsightMetricInfo
		return ret
	}

	return o.MetricsInfo
}

// GetMetricsInfoOk returns a tuple with the MetricsInfo field value
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetMetricsInfoOk() ([]InsightMetricInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetricsInfo, true
}

// SetMetricsInfo sets field value
func (o *ScatterInsightBase) SetMetricsInfo(v []InsightMetricInfo) {
	o.MetricsInfo = v
}

// GetIndex returns the Index field value
func (o *ScatterInsightBase) GetIndex() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetIndexOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *ScatterInsightBase) SetIndex(v float64) {
	o.Index = v
}

// GetMinHash returns the MinHash field value
func (o *ScatterInsightBase) GetMinHash() []float64 {
	if o == nil {
		var ret []float64
		return ret
	}

	return o.MinHash
}

// GetMinHashOk returns a tuple with the MinHash field value
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetMinHashOk() ([]float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinHash, true
}

// SetMinHash sets field value
func (o *ScatterInsightBase) SetMinHash(v []float64) {
	o.MinHash = v
}

// GetCsvPath returns the CsvPath field value if set, zero value otherwise.
func (o *ScatterInsightBase) GetCsvPath() string {
	if o == nil || IsNil(o.CsvPath) {
		var ret string
		return ret
	}
	return *o.CsvPath
}

// GetCsvPathOk returns a tuple with the CsvPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScatterInsightBase) GetCsvPathOk() (*string, bool) {
	if o == nil || IsNil(o.CsvPath) {
		return nil, false
	}
	return o.CsvPath, true
}

// HasCsvPath returns a boolean if a field has been set.
func (o *ScatterInsightBase) HasCsvPath() bool {
	if o != nil && !IsNil(o.CsvPath) {
		return true
	}

	return false
}

// SetCsvPath gets a reference to the given string and assigns it to the CsvPath field.
func (o *ScatterInsightBase) SetCsvPath(v string) {
	o.CsvPath = &v
}

func (o ScatterInsightBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScatterInsightBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	toSerialize["n_samples"] = o.NSamples
	toSerialize["mutual_info_elements"] = o.MutualInfoElements
	toSerialize["blob_path"] = o.BlobPath
	if !IsNil(o.InsightSubCategoryDsCuration) {
		toSerialize["insight_sub_category_ds_curation"] = o.InsightSubCategoryDsCuration
	}
	if !IsNil(o.InsightCategoryPerformance) {
		toSerialize["insight_category_performance"] = o.InsightCategoryPerformance
	}
	toSerialize["severity"] = o.Severity
	toSerialize["severity_metrics"] = o.SeverityMetrics
	toSerialize["metrics_info"] = o.MetricsInfo
	toSerialize["index"] = o.Index
	toSerialize["min_hash"] = o.MinHash
	if !IsNil(o.CsvPath) {
		toSerialize["csv_path"] = o.CsvPath
	}
	return toSerialize, nil
}

type NullableScatterInsightBase struct {
	value *ScatterInsightBase
	isSet bool
}

func (v NullableScatterInsightBase) Get() *ScatterInsightBase {
	return v.value
}

func (v *NullableScatterInsightBase) Set(val *ScatterInsightBase) {
	v.value = val
	v.isSet = true
}

func (v NullableScatterInsightBase) IsSet() bool {
	return v.isSet
}

func (v *NullableScatterInsightBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScatterInsightBase(val *ScatterInsightBase) *NullableScatterInsightBase {
	return &NullableScatterInsightBase{value: val, isSet: true}
}

func (v NullableScatterInsightBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScatterInsightBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
