/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.607
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"time"
)

// checks if the Notification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Notification{}

// Notification struct for Notification
type Notification struct {
	ProjectId   *string                `json:"projectId,omitempty"`
	Cid         string                 `json:"cid"`
	TeamId      string                 `json:"teamId"`
	User        string                 `json:"user"`
	Title       string                 `json:"title"`
	MessageData CustomMessageData      `json:"messageData"`
	Identifier  string                 `json:"identifier"`
	Context     JobNotificationContext `json:"context"`
	CreatedAt   time.Time              `json:"createdAt"`
	IsRead      bool                   `json:"isRead"`
}

// NewNotification instantiates a new Notification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification(cid string, teamId string, user string, title string, messageData CustomMessageData, identifier string, context JobNotificationContext, createdAt time.Time, isRead bool) *Notification {
	this := Notification{}
	this.Cid = cid
	this.TeamId = teamId
	this.User = user
	this.Title = title
	this.MessageData = messageData
	this.Identifier = identifier
	this.Context = context
	this.CreatedAt = createdAt
	this.IsRead = isRead
	return &this
}

// NewNotificationWithDefaults instantiates a new Notification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationWithDefaults() *Notification {
	this := Notification{}
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *Notification) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *Notification) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *Notification) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetCid returns the Cid field value
func (o *Notification) GetCid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cid
}

// GetCidOk returns a tuple with the Cid field value
// and a boolean to check if the value has been set.
func (o *Notification) GetCidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cid, true
}

// SetCid sets field value
func (o *Notification) SetCid(v string) {
	o.Cid = v
}

// GetTeamId returns the TeamId field value
func (o *Notification) GetTeamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *Notification) GetTeamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *Notification) SetTeamId(v string) {
	o.TeamId = v
}

// GetUser returns the User field value
func (o *Notification) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *Notification) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *Notification) SetUser(v string) {
	o.User = v
}

// GetTitle returns the Title field value
func (o *Notification) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Notification) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Notification) SetTitle(v string) {
	o.Title = v
}

// GetMessageData returns the MessageData field value
func (o *Notification) GetMessageData() CustomMessageData {
	if o == nil {
		var ret CustomMessageData
		return ret
	}

	return o.MessageData
}

// GetMessageDataOk returns a tuple with the MessageData field value
// and a boolean to check if the value has been set.
func (o *Notification) GetMessageDataOk() (*CustomMessageData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageData, true
}

// SetMessageData sets field value
func (o *Notification) SetMessageData(v CustomMessageData) {
	o.MessageData = v
}

// GetIdentifier returns the Identifier field value
func (o *Notification) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *Notification) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *Notification) SetIdentifier(v string) {
	o.Identifier = v
}

// GetContext returns the Context field value
func (o *Notification) GetContext() JobNotificationContext {
	if o == nil {
		var ret JobNotificationContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *Notification) GetContextOk() (*JobNotificationContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *Notification) SetContext(v JobNotificationContext) {
	o.Context = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Notification) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Notification) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Notification) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetIsRead returns the IsRead field value
func (o *Notification) GetIsRead() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRead
}

// GetIsReadOk returns a tuple with the IsRead field value
// and a boolean to check if the value has been set.
func (o *Notification) GetIsReadOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRead, true
}

// SetIsRead sets field value
func (o *Notification) SetIsRead(v bool) {
	o.IsRead = v
}

func (o Notification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Notification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	toSerialize["cid"] = o.Cid
	toSerialize["teamId"] = o.TeamId
	toSerialize["user"] = o.User
	toSerialize["title"] = o.Title
	toSerialize["messageData"] = o.MessageData
	toSerialize["identifier"] = o.Identifier
	toSerialize["context"] = o.Context
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["isRead"] = o.IsRead
	return toSerialize, nil
}

type NullableNotification struct {
	value *Notification
	isSet bool
}

func (v NullableNotification) Get() *Notification {
	return v.value
}

func (v *NullableNotification) Set(val *Notification) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification(val *Notification) *NullableNotification {
	return &NullableNotification{value: val, isSet: true}
}

func (v NullableNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
