/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.618
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the OverfittingInsight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OverfittingInsight{}

// OverfittingInsight struct for OverfittingInsight
type OverfittingInsight struct {
	Type                         ScatterInsightType             `json:"type"`
	Filter                       ScatterFilter                  `json:"filter"`
	MutualInfoElements           []MutualInformationElement     `json:"mutual_info_elements,omitempty"`
	BlobPath                     *string                        `json:"blob_path,omitempty"`
	InsightSubCategoryDsCuration *InsightSubCategoryDSCuration  `json:"insight_sub_category_ds_curation,omitempty"`
	InsightCategoryPerformance   *InsightSubCategoryPerformance `json:"insight_category_performance,omitempty"`
	Index                        *float64                       `json:"index,omitempty"`
	NSamplesValidation           float64                        `json:"n_samples_validation"`
	NSamplesTraining             float64                        `json:"n_samples_training"`
	AvgMetricValidation          float64                        `json:"avg_metric_validation"`
	AvgMetricTraining            float64                        `json:"avg_metric_training"`
	MetricName                   string                         `json:"metric_name"`
	// Construct a type with a set of properties K of type T
	Configuration map[string]interface{} `json:"configuration,omitempty"`
	MetricsNames  []string               `json:"metrics_names,omitempty"`
}

// NewOverfittingInsight instantiates a new OverfittingInsight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverfittingInsight(type_ ScatterInsightType, filter ScatterFilter, nSamplesValidation float64, nSamplesTraining float64, avgMetricValidation float64, avgMetricTraining float64, metricName string) *OverfittingInsight {
	this := OverfittingInsight{}
	this.Type = type_
	this.Filter = filter
	this.NSamplesValidation = nSamplesValidation
	this.NSamplesTraining = nSamplesTraining
	this.AvgMetricValidation = avgMetricValidation
	this.AvgMetricTraining = avgMetricTraining
	this.MetricName = metricName
	return &this
}

// NewOverfittingInsightWithDefaults instantiates a new OverfittingInsight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverfittingInsightWithDefaults() *OverfittingInsight {
	this := OverfittingInsight{}
	return &this
}

// GetType returns the Type field value
func (o *OverfittingInsight) GetType() ScatterInsightType {
	if o == nil {
		var ret ScatterInsightType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetTypeOk() (*ScatterInsightType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OverfittingInsight) SetType(v ScatterInsightType) {
	o.Type = v
}

// GetFilter returns the Filter field value
func (o *OverfittingInsight) GetFilter() ScatterFilter {
	if o == nil {
		var ret ScatterFilter
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetFilterOk() (*ScatterFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *OverfittingInsight) SetFilter(v ScatterFilter) {
	o.Filter = v
}

// GetMutualInfoElements returns the MutualInfoElements field value if set, zero value otherwise.
func (o *OverfittingInsight) GetMutualInfoElements() []MutualInformationElement {
	if o == nil || IsNil(o.MutualInfoElements) {
		var ret []MutualInformationElement
		return ret
	}
	return o.MutualInfoElements
}

// GetMutualInfoElementsOk returns a tuple with the MutualInfoElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetMutualInfoElementsOk() ([]MutualInformationElement, bool) {
	if o == nil || IsNil(o.MutualInfoElements) {
		return nil, false
	}
	return o.MutualInfoElements, true
}

// HasMutualInfoElements returns a boolean if a field has been set.
func (o *OverfittingInsight) HasMutualInfoElements() bool {
	if o != nil && !IsNil(o.MutualInfoElements) {
		return true
	}

	return false
}

// SetMutualInfoElements gets a reference to the given []MutualInformationElement and assigns it to the MutualInfoElements field.
func (o *OverfittingInsight) SetMutualInfoElements(v []MutualInformationElement) {
	o.MutualInfoElements = v
}

// GetBlobPath returns the BlobPath field value if set, zero value otherwise.
func (o *OverfittingInsight) GetBlobPath() string {
	if o == nil || IsNil(o.BlobPath) {
		var ret string
		return ret
	}
	return *o.BlobPath
}

// GetBlobPathOk returns a tuple with the BlobPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetBlobPathOk() (*string, bool) {
	if o == nil || IsNil(o.BlobPath) {
		return nil, false
	}
	return o.BlobPath, true
}

// HasBlobPath returns a boolean if a field has been set.
func (o *OverfittingInsight) HasBlobPath() bool {
	if o != nil && !IsNil(o.BlobPath) {
		return true
	}

	return false
}

// SetBlobPath gets a reference to the given string and assigns it to the BlobPath field.
func (o *OverfittingInsight) SetBlobPath(v string) {
	o.BlobPath = &v
}

// GetInsightSubCategoryDsCuration returns the InsightSubCategoryDsCuration field value if set, zero value otherwise.
func (o *OverfittingInsight) GetInsightSubCategoryDsCuration() InsightSubCategoryDSCuration {
	if o == nil || IsNil(o.InsightSubCategoryDsCuration) {
		var ret InsightSubCategoryDSCuration
		return ret
	}
	return *o.InsightSubCategoryDsCuration
}

// GetInsightSubCategoryDsCurationOk returns a tuple with the InsightSubCategoryDsCuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetInsightSubCategoryDsCurationOk() (*InsightSubCategoryDSCuration, bool) {
	if o == nil || IsNil(o.InsightSubCategoryDsCuration) {
		return nil, false
	}
	return o.InsightSubCategoryDsCuration, true
}

// HasInsightSubCategoryDsCuration returns a boolean if a field has been set.
func (o *OverfittingInsight) HasInsightSubCategoryDsCuration() bool {
	if o != nil && !IsNil(o.InsightSubCategoryDsCuration) {
		return true
	}

	return false
}

// SetInsightSubCategoryDsCuration gets a reference to the given InsightSubCategoryDSCuration and assigns it to the InsightSubCategoryDsCuration field.
func (o *OverfittingInsight) SetInsightSubCategoryDsCuration(v InsightSubCategoryDSCuration) {
	o.InsightSubCategoryDsCuration = &v
}

// GetInsightCategoryPerformance returns the InsightCategoryPerformance field value if set, zero value otherwise.
func (o *OverfittingInsight) GetInsightCategoryPerformance() InsightSubCategoryPerformance {
	if o == nil || IsNil(o.InsightCategoryPerformance) {
		var ret InsightSubCategoryPerformance
		return ret
	}
	return *o.InsightCategoryPerformance
}

// GetInsightCategoryPerformanceOk returns a tuple with the InsightCategoryPerformance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetInsightCategoryPerformanceOk() (*InsightSubCategoryPerformance, bool) {
	if o == nil || IsNil(o.InsightCategoryPerformance) {
		return nil, false
	}
	return o.InsightCategoryPerformance, true
}

// HasInsightCategoryPerformance returns a boolean if a field has been set.
func (o *OverfittingInsight) HasInsightCategoryPerformance() bool {
	if o != nil && !IsNil(o.InsightCategoryPerformance) {
		return true
	}

	return false
}

// SetInsightCategoryPerformance gets a reference to the given InsightSubCategoryPerformance and assigns it to the InsightCategoryPerformance field.
func (o *OverfittingInsight) SetInsightCategoryPerformance(v InsightSubCategoryPerformance) {
	o.InsightCategoryPerformance = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *OverfittingInsight) GetIndex() float64 {
	if o == nil || IsNil(o.Index) {
		var ret float64
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetIndexOk() (*float64, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *OverfittingInsight) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given float64 and assigns it to the Index field.
func (o *OverfittingInsight) SetIndex(v float64) {
	o.Index = &v
}

// GetNSamplesValidation returns the NSamplesValidation field value
func (o *OverfittingInsight) GetNSamplesValidation() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.NSamplesValidation
}

// GetNSamplesValidationOk returns a tuple with the NSamplesValidation field value
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetNSamplesValidationOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NSamplesValidation, true
}

// SetNSamplesValidation sets field value
func (o *OverfittingInsight) SetNSamplesValidation(v float64) {
	o.NSamplesValidation = v
}

// GetNSamplesTraining returns the NSamplesTraining field value
func (o *OverfittingInsight) GetNSamplesTraining() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.NSamplesTraining
}

// GetNSamplesTrainingOk returns a tuple with the NSamplesTraining field value
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetNSamplesTrainingOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NSamplesTraining, true
}

// SetNSamplesTraining sets field value
func (o *OverfittingInsight) SetNSamplesTraining(v float64) {
	o.NSamplesTraining = v
}

// GetAvgMetricValidation returns the AvgMetricValidation field value
func (o *OverfittingInsight) GetAvgMetricValidation() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AvgMetricValidation
}

// GetAvgMetricValidationOk returns a tuple with the AvgMetricValidation field value
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetAvgMetricValidationOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvgMetricValidation, true
}

// SetAvgMetricValidation sets field value
func (o *OverfittingInsight) SetAvgMetricValidation(v float64) {
	o.AvgMetricValidation = v
}

// GetAvgMetricTraining returns the AvgMetricTraining field value
func (o *OverfittingInsight) GetAvgMetricTraining() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AvgMetricTraining
}

// GetAvgMetricTrainingOk returns a tuple with the AvgMetricTraining field value
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetAvgMetricTrainingOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvgMetricTraining, true
}

// SetAvgMetricTraining sets field value
func (o *OverfittingInsight) SetAvgMetricTraining(v float64) {
	o.AvgMetricTraining = v
}

// GetMetricName returns the MetricName field value
func (o *OverfittingInsight) GetMetricName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetMetricNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricName, true
}

// SetMetricName sets field value
func (o *OverfittingInsight) SetMetricName(v string) {
	o.MetricName = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *OverfittingInsight) GetConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *OverfittingInsight) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]interface{} and assigns it to the Configuration field.
func (o *OverfittingInsight) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

// GetMetricsNames returns the MetricsNames field value if set, zero value otherwise.
func (o *OverfittingInsight) GetMetricsNames() []string {
	if o == nil || IsNil(o.MetricsNames) {
		var ret []string
		return ret
	}
	return o.MetricsNames
}

// GetMetricsNamesOk returns a tuple with the MetricsNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverfittingInsight) GetMetricsNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.MetricsNames) {
		return nil, false
	}
	return o.MetricsNames, true
}

// HasMetricsNames returns a boolean if a field has been set.
func (o *OverfittingInsight) HasMetricsNames() bool {
	if o != nil && !IsNil(o.MetricsNames) {
		return true
	}

	return false
}

// SetMetricsNames gets a reference to the given []string and assigns it to the MetricsNames field.
func (o *OverfittingInsight) SetMetricsNames(v []string) {
	o.MetricsNames = v
}

func (o OverfittingInsight) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OverfittingInsight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["filter"] = o.Filter
	if !IsNil(o.MutualInfoElements) {
		toSerialize["mutual_info_elements"] = o.MutualInfoElements
	}
	if !IsNil(o.BlobPath) {
		toSerialize["blob_path"] = o.BlobPath
	}
	if !IsNil(o.InsightSubCategoryDsCuration) {
		toSerialize["insight_sub_category_ds_curation"] = o.InsightSubCategoryDsCuration
	}
	if !IsNil(o.InsightCategoryPerformance) {
		toSerialize["insight_category_performance"] = o.InsightCategoryPerformance
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	toSerialize["n_samples_validation"] = o.NSamplesValidation
	toSerialize["n_samples_training"] = o.NSamplesTraining
	toSerialize["avg_metric_validation"] = o.AvgMetricValidation
	toSerialize["avg_metric_training"] = o.AvgMetricTraining
	toSerialize["metric_name"] = o.MetricName
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.MetricsNames) {
		toSerialize["metrics_names"] = o.MetricsNames
	}
	return toSerialize, nil
}

type NullableOverfittingInsight struct {
	value *OverfittingInsight
	isSet bool
}

func (v NullableOverfittingInsight) Get() *OverfittingInsight {
	return v.value
}

func (v *NullableOverfittingInsight) Set(val *OverfittingInsight) {
	v.value = val
	v.isSet = true
}

func (v NullableOverfittingInsight) IsSet() bool {
	return v.isSet
}

func (v *NullableOverfittingInsight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverfittingInsight(val *OverfittingInsight) *NullableOverfittingInsight {
	return &NullableOverfittingInsight{value: val, isSet: true}
}

func (v NullableOverfittingInsight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverfittingInsight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
