/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.618
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// EpochMetricsValue struct for EpochMetricsValue
type EpochMetricsValue struct {
	EpochMetricsValueAnyOf  *EpochMetricsValueAnyOf
	EpochMetricsValueAnyOf1 *EpochMetricsValueAnyOf1
	EpochMetricsValueAnyOf2 *EpochMetricsValueAnyOf2
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *EpochMetricsValue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into EpochMetricsValueAnyOf
	err = json.Unmarshal(data, &dst.EpochMetricsValueAnyOf)
	if err == nil {
		jsonEpochMetricsValueAnyOf, _ := json.Marshal(dst.EpochMetricsValueAnyOf)
		if string(jsonEpochMetricsValueAnyOf) == "{}" { // empty struct
			dst.EpochMetricsValueAnyOf = nil
		} else {
			return nil // data stored in dst.EpochMetricsValueAnyOf, return on the first match
		}
	} else {
		dst.EpochMetricsValueAnyOf = nil
	}

	// try to unmarshal JSON data into EpochMetricsValueAnyOf1
	err = json.Unmarshal(data, &dst.EpochMetricsValueAnyOf1)
	if err == nil {
		jsonEpochMetricsValueAnyOf1, _ := json.Marshal(dst.EpochMetricsValueAnyOf1)
		if string(jsonEpochMetricsValueAnyOf1) == "{}" { // empty struct
			dst.EpochMetricsValueAnyOf1 = nil
		} else {
			return nil // data stored in dst.EpochMetricsValueAnyOf1, return on the first match
		}
	} else {
		dst.EpochMetricsValueAnyOf1 = nil
	}

	// try to unmarshal JSON data into EpochMetricsValueAnyOf2
	err = json.Unmarshal(data, &dst.EpochMetricsValueAnyOf2)
	if err == nil {
		jsonEpochMetricsValueAnyOf2, _ := json.Marshal(dst.EpochMetricsValueAnyOf2)
		if string(jsonEpochMetricsValueAnyOf2) == "{}" { // empty struct
			dst.EpochMetricsValueAnyOf2 = nil
		} else {
			return nil // data stored in dst.EpochMetricsValueAnyOf2, return on the first match
		}
	} else {
		dst.EpochMetricsValueAnyOf2 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(EpochMetricsValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *EpochMetricsValue) MarshalJSON() ([]byte, error) {
	if src.EpochMetricsValueAnyOf != nil {
		return json.Marshal(&src.EpochMetricsValueAnyOf)
	}

	if src.EpochMetricsValueAnyOf1 != nil {
		return json.Marshal(&src.EpochMetricsValueAnyOf1)
	}

	if src.EpochMetricsValueAnyOf2 != nil {
		return json.Marshal(&src.EpochMetricsValueAnyOf2)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableEpochMetricsValue struct {
	value *EpochMetricsValue
	isSet bool
}

func (v NullableEpochMetricsValue) Get() *EpochMetricsValue {
	return v.value
}

func (v *NullableEpochMetricsValue) Set(val *EpochMetricsValue) {
	v.value = val
	v.isSet = true
}

func (v NullableEpochMetricsValue) IsSet() bool {
	return v.isSet
}

func (v *NullableEpochMetricsValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEpochMetricsValue(val *EpochMetricsValue) *NullableEpochMetricsValue {
	return &NullableEpochMetricsValue{value: val, isSet: true}
}

func (v NullableEpochMetricsValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEpochMetricsValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
