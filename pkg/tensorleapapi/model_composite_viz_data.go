/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.638
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the CompositeVizData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompositeVizData{}

// CompositeVizData struct for CompositeVizData
type CompositeVizData struct {
	Data []CompositeVizItem `json:"data"`
	Type DataTypeEnum       `json:"type"`
}

// NewCompositeVizData instantiates a new CompositeVizData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompositeVizData(data []CompositeVizItem, type_ DataTypeEnum) *CompositeVizData {
	this := CompositeVizData{}
	this.Data = data
	this.Type = type_
	return &this
}

// NewCompositeVizDataWithDefaults instantiates a new CompositeVizData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompositeVizDataWithDefaults() *CompositeVizData {
	this := CompositeVizData{}
	return &this
}

// GetData returns the Data field value
func (o *CompositeVizData) GetData() []CompositeVizItem {
	if o == nil {
		var ret []CompositeVizItem
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CompositeVizData) GetDataOk() ([]CompositeVizItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *CompositeVizData) SetData(v []CompositeVizItem) {
	o.Data = v
}

// GetType returns the Type field value
func (o *CompositeVizData) GetType() DataTypeEnum {
	if o == nil {
		var ret DataTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CompositeVizData) GetTypeOk() (*DataTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CompositeVizData) SetType(v DataTypeEnum) {
	o.Type = v
}

func (o CompositeVizData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompositeVizData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableCompositeVizData struct {
	value *CompositeVizData
	isSet bool
}

func (v NullableCompositeVizData) Get() *CompositeVizData {
	return v.value
}

func (v *NullableCompositeVizData) Set(val *CompositeVizData) {
	v.value = val
	v.isSet = true
}

func (v NullableCompositeVizData) IsSet() bool {
	return v.isSet
}

func (v *NullableCompositeVizData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompositeVizData(val *CompositeVizData) *NullableCompositeVizData {
	return &NullableCompositeVizData{value: val, isSet: true}
}

func (v NullableCompositeVizData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompositeVizData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
