/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.592
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the DataLeakageInsight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataLeakageInsight{}

// DataLeakageInsight struct for DataLeakageInsight
type DataLeakageInsight struct {
	Type                         ScatterInsightType             `json:"type"`
	Filter                       ScatterFilter                  `json:"filter"`
	MutualInfoElements           []MutualInformationElement     `json:"mutual_info_elements,omitempty"`
	BlobPath                     *string                        `json:"blob_path,omitempty"`
	InsightSubCategoryDsCuration *InsightSubCategoryDSCuration  `json:"insight_sub_category_ds_curation,omitempty"`
	InsightCategoryPerformance   *InsightSubCategoryPerformance `json:"insight_category_performance,omitempty"`
	Index                        *float64                       `json:"index,omitempty"`
	FirstSubset                  DataStateType                  `json:"first_subset"`
	SecondSubset                 DataStateType                  `json:"second_subset"`
	NCrossSubsetsDuplications    float64                        `json:"n_cross_subsets_duplications"`
}

// NewDataLeakageInsight instantiates a new DataLeakageInsight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLeakageInsight(type_ ScatterInsightType, filter ScatterFilter, firstSubset DataStateType, secondSubset DataStateType, nCrossSubsetsDuplications float64) *DataLeakageInsight {
	this := DataLeakageInsight{}
	this.Type = type_
	this.Filter = filter
	this.FirstSubset = firstSubset
	this.SecondSubset = secondSubset
	this.NCrossSubsetsDuplications = nCrossSubsetsDuplications
	return &this
}

// NewDataLeakageInsightWithDefaults instantiates a new DataLeakageInsight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLeakageInsightWithDefaults() *DataLeakageInsight {
	this := DataLeakageInsight{}
	return &this
}

// GetType returns the Type field value
func (o *DataLeakageInsight) GetType() ScatterInsightType {
	if o == nil {
		var ret ScatterInsightType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DataLeakageInsight) GetTypeOk() (*ScatterInsightType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DataLeakageInsight) SetType(v ScatterInsightType) {
	o.Type = v
}

// GetFilter returns the Filter field value
func (o *DataLeakageInsight) GetFilter() ScatterFilter {
	if o == nil {
		var ret ScatterFilter
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *DataLeakageInsight) GetFilterOk() (*ScatterFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *DataLeakageInsight) SetFilter(v ScatterFilter) {
	o.Filter = v
}

// GetMutualInfoElements returns the MutualInfoElements field value if set, zero value otherwise.
func (o *DataLeakageInsight) GetMutualInfoElements() []MutualInformationElement {
	if o == nil || IsNil(o.MutualInfoElements) {
		var ret []MutualInformationElement
		return ret
	}
	return o.MutualInfoElements
}

// GetMutualInfoElementsOk returns a tuple with the MutualInfoElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLeakageInsight) GetMutualInfoElementsOk() ([]MutualInformationElement, bool) {
	if o == nil || IsNil(o.MutualInfoElements) {
		return nil, false
	}
	return o.MutualInfoElements, true
}

// HasMutualInfoElements returns a boolean if a field has been set.
func (o *DataLeakageInsight) HasMutualInfoElements() bool {
	if o != nil && !IsNil(o.MutualInfoElements) {
		return true
	}

	return false
}

// SetMutualInfoElements gets a reference to the given []MutualInformationElement and assigns it to the MutualInfoElements field.
func (o *DataLeakageInsight) SetMutualInfoElements(v []MutualInformationElement) {
	o.MutualInfoElements = v
}

// GetBlobPath returns the BlobPath field value if set, zero value otherwise.
func (o *DataLeakageInsight) GetBlobPath() string {
	if o == nil || IsNil(o.BlobPath) {
		var ret string
		return ret
	}
	return *o.BlobPath
}

// GetBlobPathOk returns a tuple with the BlobPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLeakageInsight) GetBlobPathOk() (*string, bool) {
	if o == nil || IsNil(o.BlobPath) {
		return nil, false
	}
	return o.BlobPath, true
}

// HasBlobPath returns a boolean if a field has been set.
func (o *DataLeakageInsight) HasBlobPath() bool {
	if o != nil && !IsNil(o.BlobPath) {
		return true
	}

	return false
}

// SetBlobPath gets a reference to the given string and assigns it to the BlobPath field.
func (o *DataLeakageInsight) SetBlobPath(v string) {
	o.BlobPath = &v
}

// GetInsightSubCategoryDsCuration returns the InsightSubCategoryDsCuration field value if set, zero value otherwise.
func (o *DataLeakageInsight) GetInsightSubCategoryDsCuration() InsightSubCategoryDSCuration {
	if o == nil || IsNil(o.InsightSubCategoryDsCuration) {
		var ret InsightSubCategoryDSCuration
		return ret
	}
	return *o.InsightSubCategoryDsCuration
}

// GetInsightSubCategoryDsCurationOk returns a tuple with the InsightSubCategoryDsCuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLeakageInsight) GetInsightSubCategoryDsCurationOk() (*InsightSubCategoryDSCuration, bool) {
	if o == nil || IsNil(o.InsightSubCategoryDsCuration) {
		return nil, false
	}
	return o.InsightSubCategoryDsCuration, true
}

// HasInsightSubCategoryDsCuration returns a boolean if a field has been set.
func (o *DataLeakageInsight) HasInsightSubCategoryDsCuration() bool {
	if o != nil && !IsNil(o.InsightSubCategoryDsCuration) {
		return true
	}

	return false
}

// SetInsightSubCategoryDsCuration gets a reference to the given InsightSubCategoryDSCuration and assigns it to the InsightSubCategoryDsCuration field.
func (o *DataLeakageInsight) SetInsightSubCategoryDsCuration(v InsightSubCategoryDSCuration) {
	o.InsightSubCategoryDsCuration = &v
}

// GetInsightCategoryPerformance returns the InsightCategoryPerformance field value if set, zero value otherwise.
func (o *DataLeakageInsight) GetInsightCategoryPerformance() InsightSubCategoryPerformance {
	if o == nil || IsNil(o.InsightCategoryPerformance) {
		var ret InsightSubCategoryPerformance
		return ret
	}
	return *o.InsightCategoryPerformance
}

// GetInsightCategoryPerformanceOk returns a tuple with the InsightCategoryPerformance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLeakageInsight) GetInsightCategoryPerformanceOk() (*InsightSubCategoryPerformance, bool) {
	if o == nil || IsNil(o.InsightCategoryPerformance) {
		return nil, false
	}
	return o.InsightCategoryPerformance, true
}

// HasInsightCategoryPerformance returns a boolean if a field has been set.
func (o *DataLeakageInsight) HasInsightCategoryPerformance() bool {
	if o != nil && !IsNil(o.InsightCategoryPerformance) {
		return true
	}

	return false
}

// SetInsightCategoryPerformance gets a reference to the given InsightSubCategoryPerformance and assigns it to the InsightCategoryPerformance field.
func (o *DataLeakageInsight) SetInsightCategoryPerformance(v InsightSubCategoryPerformance) {
	o.InsightCategoryPerformance = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *DataLeakageInsight) GetIndex() float64 {
	if o == nil || IsNil(o.Index) {
		var ret float64
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLeakageInsight) GetIndexOk() (*float64, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *DataLeakageInsight) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given float64 and assigns it to the Index field.
func (o *DataLeakageInsight) SetIndex(v float64) {
	o.Index = &v
}

// GetFirstSubset returns the FirstSubset field value
func (o *DataLeakageInsight) GetFirstSubset() DataStateType {
	if o == nil {
		var ret DataStateType
		return ret
	}

	return o.FirstSubset
}

// GetFirstSubsetOk returns a tuple with the FirstSubset field value
// and a boolean to check if the value has been set.
func (o *DataLeakageInsight) GetFirstSubsetOk() (*DataStateType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstSubset, true
}

// SetFirstSubset sets field value
func (o *DataLeakageInsight) SetFirstSubset(v DataStateType) {
	o.FirstSubset = v
}

// GetSecondSubset returns the SecondSubset field value
func (o *DataLeakageInsight) GetSecondSubset() DataStateType {
	if o == nil {
		var ret DataStateType
		return ret
	}

	return o.SecondSubset
}

// GetSecondSubsetOk returns a tuple with the SecondSubset field value
// and a boolean to check if the value has been set.
func (o *DataLeakageInsight) GetSecondSubsetOk() (*DataStateType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecondSubset, true
}

// SetSecondSubset sets field value
func (o *DataLeakageInsight) SetSecondSubset(v DataStateType) {
	o.SecondSubset = v
}

// GetNCrossSubsetsDuplications returns the NCrossSubsetsDuplications field value
func (o *DataLeakageInsight) GetNCrossSubsetsDuplications() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.NCrossSubsetsDuplications
}

// GetNCrossSubsetsDuplicationsOk returns a tuple with the NCrossSubsetsDuplications field value
// and a boolean to check if the value has been set.
func (o *DataLeakageInsight) GetNCrossSubsetsDuplicationsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NCrossSubsetsDuplications, true
}

// SetNCrossSubsetsDuplications sets field value
func (o *DataLeakageInsight) SetNCrossSubsetsDuplications(v float64) {
	o.NCrossSubsetsDuplications = v
}

func (o DataLeakageInsight) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataLeakageInsight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["filter"] = o.Filter
	if !IsNil(o.MutualInfoElements) {
		toSerialize["mutual_info_elements"] = o.MutualInfoElements
	}
	if !IsNil(o.BlobPath) {
		toSerialize["blob_path"] = o.BlobPath
	}
	if !IsNil(o.InsightSubCategoryDsCuration) {
		toSerialize["insight_sub_category_ds_curation"] = o.InsightSubCategoryDsCuration
	}
	if !IsNil(o.InsightCategoryPerformance) {
		toSerialize["insight_category_performance"] = o.InsightCategoryPerformance
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	toSerialize["first_subset"] = o.FirstSubset
	toSerialize["second_subset"] = o.SecondSubset
	toSerialize["n_cross_subsets_duplications"] = o.NCrossSubsetsDuplications
	return toSerialize, nil
}

type NullableDataLeakageInsight struct {
	value *DataLeakageInsight
	isSet bool
}

func (v NullableDataLeakageInsight) Get() *DataLeakageInsight {
	return v.value
}

func (v *NullableDataLeakageInsight) Set(val *DataLeakageInsight) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLeakageInsight) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLeakageInsight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLeakageInsight(val *DataLeakageInsight) *NullableDataLeakageInsight {
	return &NullableDataLeakageInsight{value: val, isSet: true}
}

func (v NullableDataLeakageInsight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLeakageInsight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
