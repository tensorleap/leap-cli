/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.618
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// HttpMethods the model 'HttpMethods'
type HttpMethods string

// List of HttpMethods
const (
	HTTPMETHODS_GET     HttpMethods = "GET"
	HTTPMETHODS_POST    HttpMethods = "POST"
	HTTPMETHODS_PUT     HttpMethods = "PUT"
	HTTPMETHODS_DELETE  HttpMethods = "DELETE"
	HTTPMETHODS_PATCH   HttpMethods = "PATCH"
	HTTPMETHODS_HEAD    HttpMethods = "HEAD"
	HTTPMETHODS_OPTIONS HttpMethods = "OPTIONS"
)

// All allowed values of HttpMethods enum
var AllowedHttpMethodsEnumValues = []HttpMethods{
	"GET",
	"POST",
	"PUT",
	"DELETE",
	"PATCH",
	"HEAD",
	"OPTIONS",
}

func (v *HttpMethods) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HttpMethods(value)
	for _, existing := range AllowedHttpMethodsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HttpMethods", value)
}

// NewHttpMethodsFromValue returns a pointer to a valid HttpMethods
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHttpMethodsFromValue(v string) (*HttpMethods, error) {
	ev := HttpMethods(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HttpMethods: valid values are %v", v, AllowedHttpMethodsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HttpMethods) IsValid() bool {
	for _, existing := range AllowedHttpMethodsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HttpMethods value
func (v HttpMethods) Ptr() *HttpMethods {
	return &v
}

type NullableHttpMethods struct {
	value *HttpMethods
	isSet bool
}

func (v NullableHttpMethods) Get() *HttpMethods {
	return v.value
}

func (v *NullableHttpMethods) Set(val *HttpMethods) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpMethods) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpMethods) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpMethods(val *HttpMethods) *NullableHttpMethods {
	return &NullableHttpMethods{value: val, isSet: true}
}

func (v NullableHttpMethods) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpMethods) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
