/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.628
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// DistributionType the model 'DistributionType'
type DistributionType string

// List of DistributionType
const (
	DISTRIBUTIONTYPE_CONTINUOUS DistributionType = "continuous"
	DISTRIBUTIONTYPE_DISTINCT   DistributionType = "distinct"
)

// All allowed values of DistributionType enum
var AllowedDistributionTypeEnumValues = []DistributionType{
	"continuous",
	"distinct",
}

func (v *DistributionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DistributionType(value)
	for _, existing := range AllowedDistributionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DistributionType", value)
}

// NewDistributionTypeFromValue returns a pointer to a valid DistributionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDistributionTypeFromValue(v string) (*DistributionType, error) {
	ev := DistributionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DistributionType: valid values are %v", v, AllowedDistributionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DistributionType) IsValid() bool {
	for _, existing := range AllowedDistributionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DistributionType value
func (v DistributionType) Ptr() *DistributionType {
	return &v
}

type NullableDistributionType struct {
	value *DistributionType
	isSet bool
}

func (v NullableDistributionType) Get() *DistributionType {
	return v.value
}

func (v *NullableDistributionType) Set(val *DistributionType) {
	v.value = val
	v.isSet = true
}

func (v NullableDistributionType) IsSet() bool {
	return v.isSet
}

func (v *NullableDistributionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistributionType(val *DistributionType) *NullableDistributionType {
	return &NullableDistributionType{value: val, isSet: true}
}

func (v NullableDistributionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDistributionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
