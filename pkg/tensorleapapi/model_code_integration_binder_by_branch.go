/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.618
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the CodeIntegrationBinderByBranch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CodeIntegrationBinderByBranch{}

// CodeIntegrationBinderByBranch struct for CodeIntegrationBinderByBranch
type CodeIntegrationBinderByBranch struct {
	CodeIntegrationId string `json:"codeIntegrationId"`
	Branch            string `json:"branch"`
	Type              string `json:"type"`
}

// NewCodeIntegrationBinderByBranch instantiates a new CodeIntegrationBinderByBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeIntegrationBinderByBranch(codeIntegrationId string, branch string, type_ string) *CodeIntegrationBinderByBranch {
	this := CodeIntegrationBinderByBranch{}
	this.CodeIntegrationId = codeIntegrationId
	this.Branch = branch
	this.Type = type_
	return &this
}

// NewCodeIntegrationBinderByBranchWithDefaults instantiates a new CodeIntegrationBinderByBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeIntegrationBinderByBranchWithDefaults() *CodeIntegrationBinderByBranch {
	this := CodeIntegrationBinderByBranch{}
	return &this
}

// GetCodeIntegrationId returns the CodeIntegrationId field value
func (o *CodeIntegrationBinderByBranch) GetCodeIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CodeIntegrationId
}

// GetCodeIntegrationIdOk returns a tuple with the CodeIntegrationId field value
// and a boolean to check if the value has been set.
func (o *CodeIntegrationBinderByBranch) GetCodeIntegrationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CodeIntegrationId, true
}

// SetCodeIntegrationId sets field value
func (o *CodeIntegrationBinderByBranch) SetCodeIntegrationId(v string) {
	o.CodeIntegrationId = v
}

// GetBranch returns the Branch field value
func (o *CodeIntegrationBinderByBranch) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *CodeIntegrationBinderByBranch) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *CodeIntegrationBinderByBranch) SetBranch(v string) {
	o.Branch = v
}

// GetType returns the Type field value
func (o *CodeIntegrationBinderByBranch) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CodeIntegrationBinderByBranch) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CodeIntegrationBinderByBranch) SetType(v string) {
	o.Type = v
}

func (o CodeIntegrationBinderByBranch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodeIntegrationBinderByBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["codeIntegrationId"] = o.CodeIntegrationId
	toSerialize["branch"] = o.Branch
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableCodeIntegrationBinderByBranch struct {
	value *CodeIntegrationBinderByBranch
	isSet bool
}

func (v NullableCodeIntegrationBinderByBranch) Get() *CodeIntegrationBinderByBranch {
	return v.value
}

func (v *NullableCodeIntegrationBinderByBranch) Set(val *CodeIntegrationBinderByBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeIntegrationBinderByBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeIntegrationBinderByBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeIntegrationBinderByBranch(val *CodeIntegrationBinderByBranch) *NullableCodeIntegrationBinderByBranch {
	return &NullableCodeIntegrationBinderByBranch{value: val, isSet: true}
}

func (v NullableCodeIntegrationBinderByBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeIntegrationBinderByBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
