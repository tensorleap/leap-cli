/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.404
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// SampleAssetNames the model 'SampleAssetNames'
type SampleAssetNames string

// List of SampleAssetNames
const (
	SAMPLEASSETNAMES_VISUALIZATION SampleAssetNames = "visualization"
	SAMPLEASSETNAMES_ANALYSIS      SampleAssetNames = "analysis"
	SAMPLEASSETNAMES_LOSS_ANALYSIS SampleAssetNames = "loss analysis"
	SAMPLEASSETNAMES_METADATA      SampleAssetNames = "metadata"
)

// All allowed values of SampleAssetNames enum
var AllowedSampleAssetNamesEnumValues = []SampleAssetNames{
	"visualization",
	"analysis",
	"loss analysis",
	"metadata",
}

func (v *SampleAssetNames) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SampleAssetNames(value)
	for _, existing := range AllowedSampleAssetNamesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SampleAssetNames", value)
}

// NewSampleAssetNamesFromValue returns a pointer to a valid SampleAssetNames
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSampleAssetNamesFromValue(v string) (*SampleAssetNames, error) {
	ev := SampleAssetNames(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SampleAssetNames: valid values are %v", v, AllowedSampleAssetNamesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SampleAssetNames) IsValid() bool {
	for _, existing := range AllowedSampleAssetNamesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SampleAssetNames value
func (v SampleAssetNames) Ptr() *SampleAssetNames {
	return &v
}

type NullableSampleAssetNames struct {
	value *SampleAssetNames
	isSet bool
}

func (v NullableSampleAssetNames) Get() *SampleAssetNames {
	return v.value
}

func (v *NullableSampleAssetNames) Set(val *SampleAssetNames) {
	v.value = val
	v.isSet = true
}

func (v NullableSampleAssetNames) IsSet() bool {
	return v.isSet
}

func (v *NullableSampleAssetNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSampleAssetNames(val *SampleAssetNames) *NullableSampleAssetNames {
	return &NullableSampleAssetNames{value: val, isSet: true}
}

func (v NullableSampleAssetNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSampleAssetNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
