/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.634
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the UpdateVersionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVersionParams{}

// UpdateVersionParams struct for UpdateVersionParams
type UpdateVersionParams struct {
	VersionId       string                 `json:"versionId"`
	ProjectId       string                 `json:"projectId"`
	Data            ModelGraph             `json:"data"`
	CodeIntegration *CodeIntegrationBinder `json:"codeIntegration,omitempty"`
	Hash            *string                `json:"hash,omitempty"`
}

// NewUpdateVersionParams instantiates a new UpdateVersionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVersionParams(versionId string, projectId string, data ModelGraph) *UpdateVersionParams {
	this := UpdateVersionParams{}
	this.VersionId = versionId
	this.ProjectId = projectId
	this.Data = data
	return &this
}

// NewUpdateVersionParamsWithDefaults instantiates a new UpdateVersionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVersionParamsWithDefaults() *UpdateVersionParams {
	this := UpdateVersionParams{}
	return &this
}

// GetVersionId returns the VersionId field value
func (o *UpdateVersionParams) GetVersionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value
// and a boolean to check if the value has been set.
func (o *UpdateVersionParams) GetVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionId, true
}

// SetVersionId sets field value
func (o *UpdateVersionParams) SetVersionId(v string) {
	o.VersionId = v
}

// GetProjectId returns the ProjectId field value
func (o *UpdateVersionParams) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *UpdateVersionParams) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *UpdateVersionParams) SetProjectId(v string) {
	o.ProjectId = v
}

// GetData returns the Data field value
func (o *UpdateVersionParams) GetData() ModelGraph {
	if o == nil {
		var ret ModelGraph
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *UpdateVersionParams) GetDataOk() (*ModelGraph, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *UpdateVersionParams) SetData(v ModelGraph) {
	o.Data = v
}

// GetCodeIntegration returns the CodeIntegration field value if set, zero value otherwise.
func (o *UpdateVersionParams) GetCodeIntegration() CodeIntegrationBinder {
	if o == nil || IsNil(o.CodeIntegration) {
		var ret CodeIntegrationBinder
		return ret
	}
	return *o.CodeIntegration
}

// GetCodeIntegrationOk returns a tuple with the CodeIntegration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVersionParams) GetCodeIntegrationOk() (*CodeIntegrationBinder, bool) {
	if o == nil || IsNil(o.CodeIntegration) {
		return nil, false
	}
	return o.CodeIntegration, true
}

// HasCodeIntegration returns a boolean if a field has been set.
func (o *UpdateVersionParams) HasCodeIntegration() bool {
	if o != nil && !IsNil(o.CodeIntegration) {
		return true
	}

	return false
}

// SetCodeIntegration gets a reference to the given CodeIntegrationBinder and assigns it to the CodeIntegration field.
func (o *UpdateVersionParams) SetCodeIntegration(v CodeIntegrationBinder) {
	o.CodeIntegration = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *UpdateVersionParams) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVersionParams) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *UpdateVersionParams) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *UpdateVersionParams) SetHash(v string) {
	o.Hash = &v
}

func (o UpdateVersionParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVersionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["versionId"] = o.VersionId
	toSerialize["projectId"] = o.ProjectId
	toSerialize["data"] = o.Data
	if !IsNil(o.CodeIntegration) {
		toSerialize["codeIntegration"] = o.CodeIntegration
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	return toSerialize, nil
}

type NullableUpdateVersionParams struct {
	value *UpdateVersionParams
	isSet bool
}

func (v NullableUpdateVersionParams) Get() *UpdateVersionParams {
	return v.value
}

func (v *NullableUpdateVersionParams) Set(val *UpdateVersionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVersionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVersionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVersionParams(val *UpdateVersionParams) *NullableUpdateVersionParams {
	return &NullableUpdateVersionParams{value: val, isSet: true}
}

func (v NullableUpdateVersionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVersionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
