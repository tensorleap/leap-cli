/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.417
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// MappingErrorType the model 'MappingErrorType'
type MappingErrorType string

// List of MappingErrorType
const (
	MAPPINGERRORTYPE_DATASET_MAPPING_APPLY_ERROR   MappingErrorType = "datasetMappingApplyError"
	MAPPINGERRORTYPE_DATASET_MAPPING_APPLY_WARNING MappingErrorType = "datasetMappingApplyWarning"
)

// All allowed values of MappingErrorType enum
var AllowedMappingErrorTypeEnumValues = []MappingErrorType{
	"datasetMappingApplyError",
	"datasetMappingApplyWarning",
}

func (v *MappingErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MappingErrorType(value)
	for _, existing := range AllowedMappingErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MappingErrorType", value)
}

// NewMappingErrorTypeFromValue returns a pointer to a valid MappingErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMappingErrorTypeFromValue(v string) (*MappingErrorType, error) {
	ev := MappingErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MappingErrorType: valid values are %v", v, AllowedMappingErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MappingErrorType) IsValid() bool {
	for _, existing := range AllowedMappingErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MappingErrorType value
func (v MappingErrorType) Ptr() *MappingErrorType {
	return &v
}

type NullableMappingErrorType struct {
	value *MappingErrorType
	isSet bool
}

func (v NullableMappingErrorType) Get() *MappingErrorType {
	return v.value
}

func (v *NullableMappingErrorType) Set(val *MappingErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableMappingErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableMappingErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappingErrorType(val *MappingErrorType) *NullableMappingErrorType {
	return &NullableMappingErrorType{value: val, isSet: true}
}

func (v NullableMappingErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMappingErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
