/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.382
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the SampleSelectionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SampleSelectionParams{}

// SampleSelectionParams struct for SampleSelectionParams
type SampleSelectionParams struct {
	SessionRunId     string         `json:"sessionRunId"`
	ProjectId        string         `json:"projectId"`
	SampleIdentity   SampleIdentity `json:"sampleIdentity"`
	FromDatasetSlice DataStateType  `json:"fromDatasetSlice"`
	BatchSize        float64        `json:"batchSize"`
	NumOfSamples     float64        `json:"numOfSamples"`
	FromEpoch        float64        `json:"fromEpoch"`
}

// NewSampleSelectionParams instantiates a new SampleSelectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSampleSelectionParams(sessionRunId string, projectId string, sampleIdentity SampleIdentity, fromDatasetSlice DataStateType, batchSize float64, numOfSamples float64, fromEpoch float64) *SampleSelectionParams {
	this := SampleSelectionParams{}
	this.SessionRunId = sessionRunId
	this.ProjectId = projectId
	this.SampleIdentity = sampleIdentity
	this.FromDatasetSlice = fromDatasetSlice
	this.BatchSize = batchSize
	this.NumOfSamples = numOfSamples
	this.FromEpoch = fromEpoch
	return &this
}

// NewSampleSelectionParamsWithDefaults instantiates a new SampleSelectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSampleSelectionParamsWithDefaults() *SampleSelectionParams {
	this := SampleSelectionParams{}
	return &this
}

// GetSessionRunId returns the SessionRunId field value
func (o *SampleSelectionParams) GetSessionRunId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionRunId
}

// GetSessionRunIdOk returns a tuple with the SessionRunId field value
// and a boolean to check if the value has been set.
func (o *SampleSelectionParams) GetSessionRunIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionRunId, true
}

// SetSessionRunId sets field value
func (o *SampleSelectionParams) SetSessionRunId(v string) {
	o.SessionRunId = v
}

// GetProjectId returns the ProjectId field value
func (o *SampleSelectionParams) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *SampleSelectionParams) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *SampleSelectionParams) SetProjectId(v string) {
	o.ProjectId = v
}

// GetSampleIdentity returns the SampleIdentity field value
func (o *SampleSelectionParams) GetSampleIdentity() SampleIdentity {
	if o == nil {
		var ret SampleIdentity
		return ret
	}

	return o.SampleIdentity
}

// GetSampleIdentityOk returns a tuple with the SampleIdentity field value
// and a boolean to check if the value has been set.
func (o *SampleSelectionParams) GetSampleIdentityOk() (*SampleIdentity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SampleIdentity, true
}

// SetSampleIdentity sets field value
func (o *SampleSelectionParams) SetSampleIdentity(v SampleIdentity) {
	o.SampleIdentity = v
}

// GetFromDatasetSlice returns the FromDatasetSlice field value
func (o *SampleSelectionParams) GetFromDatasetSlice() DataStateType {
	if o == nil {
		var ret DataStateType
		return ret
	}

	return o.FromDatasetSlice
}

// GetFromDatasetSliceOk returns a tuple with the FromDatasetSlice field value
// and a boolean to check if the value has been set.
func (o *SampleSelectionParams) GetFromDatasetSliceOk() (*DataStateType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromDatasetSlice, true
}

// SetFromDatasetSlice sets field value
func (o *SampleSelectionParams) SetFromDatasetSlice(v DataStateType) {
	o.FromDatasetSlice = v
}

// GetBatchSize returns the BatchSize field value
func (o *SampleSelectionParams) GetBatchSize() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.BatchSize
}

// GetBatchSizeOk returns a tuple with the BatchSize field value
// and a boolean to check if the value has been set.
func (o *SampleSelectionParams) GetBatchSizeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BatchSize, true
}

// SetBatchSize sets field value
func (o *SampleSelectionParams) SetBatchSize(v float64) {
	o.BatchSize = v
}

// GetNumOfSamples returns the NumOfSamples field value
func (o *SampleSelectionParams) GetNumOfSamples() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.NumOfSamples
}

// GetNumOfSamplesOk returns a tuple with the NumOfSamples field value
// and a boolean to check if the value has been set.
func (o *SampleSelectionParams) GetNumOfSamplesOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumOfSamples, true
}

// SetNumOfSamples sets field value
func (o *SampleSelectionParams) SetNumOfSamples(v float64) {
	o.NumOfSamples = v
}

// GetFromEpoch returns the FromEpoch field value
func (o *SampleSelectionParams) GetFromEpoch() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.FromEpoch
}

// GetFromEpochOk returns a tuple with the FromEpoch field value
// and a boolean to check if the value has been set.
func (o *SampleSelectionParams) GetFromEpochOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromEpoch, true
}

// SetFromEpoch sets field value
func (o *SampleSelectionParams) SetFromEpoch(v float64) {
	o.FromEpoch = v
}

func (o SampleSelectionParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SampleSelectionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sessionRunId"] = o.SessionRunId
	toSerialize["projectId"] = o.ProjectId
	toSerialize["sampleIdentity"] = o.SampleIdentity
	toSerialize["fromDatasetSlice"] = o.FromDatasetSlice
	toSerialize["batchSize"] = o.BatchSize
	toSerialize["numOfSamples"] = o.NumOfSamples
	toSerialize["fromEpoch"] = o.FromEpoch
	return toSerialize, nil
}

type NullableSampleSelectionParams struct {
	value *SampleSelectionParams
	isSet bool
}

func (v NullableSampleSelectionParams) Get() *SampleSelectionParams {
	return v.value
}

func (v *NullableSampleSelectionParams) Set(val *SampleSelectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSampleSelectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSampleSelectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSampleSelectionParams(val *SampleSelectionParams) *NullableSampleSelectionParams {
	return &NullableSampleSelectionParams{value: val, isSet: true}
}

func (v NullableSampleSelectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSampleSelectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
