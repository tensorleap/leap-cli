/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.467
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the ClearStorageResponseUnusedDirsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClearStorageResponseUnusedDirsInner{}

// ClearStorageResponseUnusedDirsInner struct for ClearStorageResponseUnusedDirsInner
type ClearStorageResponseUnusedDirsInner struct {
	Dirs []string `json:"dirs"`
	Name string   `json:"name"`
}

// NewClearStorageResponseUnusedDirsInner instantiates a new ClearStorageResponseUnusedDirsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClearStorageResponseUnusedDirsInner(dirs []string, name string) *ClearStorageResponseUnusedDirsInner {
	this := ClearStorageResponseUnusedDirsInner{}
	this.Dirs = dirs
	this.Name = name
	return &this
}

// NewClearStorageResponseUnusedDirsInnerWithDefaults instantiates a new ClearStorageResponseUnusedDirsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClearStorageResponseUnusedDirsInnerWithDefaults() *ClearStorageResponseUnusedDirsInner {
	this := ClearStorageResponseUnusedDirsInner{}
	return &this
}

// GetDirs returns the Dirs field value
func (o *ClearStorageResponseUnusedDirsInner) GetDirs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Dirs
}

// GetDirsOk returns a tuple with the Dirs field value
// and a boolean to check if the value has been set.
func (o *ClearStorageResponseUnusedDirsInner) GetDirsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dirs, true
}

// SetDirs sets field value
func (o *ClearStorageResponseUnusedDirsInner) SetDirs(v []string) {
	o.Dirs = v
}

// GetName returns the Name field value
func (o *ClearStorageResponseUnusedDirsInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ClearStorageResponseUnusedDirsInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ClearStorageResponseUnusedDirsInner) SetName(v string) {
	o.Name = v
}

func (o ClearStorageResponseUnusedDirsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClearStorageResponseUnusedDirsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dirs"] = o.Dirs
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableClearStorageResponseUnusedDirsInner struct {
	value *ClearStorageResponseUnusedDirsInner
	isSet bool
}

func (v NullableClearStorageResponseUnusedDirsInner) Get() *ClearStorageResponseUnusedDirsInner {
	return v.value
}

func (v *NullableClearStorageResponseUnusedDirsInner) Set(val *ClearStorageResponseUnusedDirsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableClearStorageResponseUnusedDirsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableClearStorageResponseUnusedDirsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClearStorageResponseUnusedDirsInner(val *ClearStorageResponseUnusedDirsInner) *NullableClearStorageResponseUnusedDirsInner {
	return &NullableClearStorageResponseUnusedDirsInner{value: val, isSet: true}
}

func (v NullableClearStorageResponseUnusedDirsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClearStorageResponseUnusedDirsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
