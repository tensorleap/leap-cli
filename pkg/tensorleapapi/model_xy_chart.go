/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.557
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the XYChart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &XYChart{}

// XYChart struct for XYChart
type XYChart struct {
	X SplitAgg `json:"x"`
	Y AggFunc  `json:"y"`
}

// NewXYChart instantiates a new XYChart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewXYChart(x SplitAgg, y AggFunc) *XYChart {
	this := XYChart{}
	this.X = x
	this.Y = y
	return &this
}

// NewXYChartWithDefaults instantiates a new XYChart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewXYChartWithDefaults() *XYChart {
	this := XYChart{}
	return &this
}

// GetX returns the X field value
func (o *XYChart) GetX() SplitAgg {
	if o == nil {
		var ret SplitAgg
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *XYChart) GetXOk() (*SplitAgg, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *XYChart) SetX(v SplitAgg) {
	o.X = v
}

// GetY returns the Y field value
func (o *XYChart) GetY() AggFunc {
	if o == nil {
		var ret AggFunc
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *XYChart) GetYOk() (*AggFunc, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *XYChart) SetY(v AggFunc) {
	o.Y = v
}

func (o XYChart) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o XYChart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	return toSerialize, nil
}

type NullableXYChart struct {
	value *XYChart
	isSet bool
}

func (v NullableXYChart) Get() *XYChart {
	return v.value
}

func (v *NullableXYChart) Set(val *XYChart) {
	v.value = val
	v.isSet = true
}

func (v NullableXYChart) IsSet() bool {
	return v.isSet
}

func (v *NullableXYChart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableXYChart(val *XYChart) *NullableXYChart {
	return &NullableXYChart{value: val, isSet: true}
}

func (v NullableXYChart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableXYChart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
