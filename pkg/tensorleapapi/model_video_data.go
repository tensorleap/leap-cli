/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.634
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the VideoData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoData{}

// VideoData struct for VideoData
type VideoData struct {
	VideoBlob string       `json:"video_blob"`
	Type      DataTypeEnum `json:"type"`
}

// NewVideoData instantiates a new VideoData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoData(videoBlob string, type_ DataTypeEnum) *VideoData {
	this := VideoData{}
	this.VideoBlob = videoBlob
	this.Type = type_
	return &this
}

// NewVideoDataWithDefaults instantiates a new VideoData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoDataWithDefaults() *VideoData {
	this := VideoData{}
	return &this
}

// GetVideoBlob returns the VideoBlob field value
func (o *VideoData) GetVideoBlob() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VideoBlob
}

// GetVideoBlobOk returns a tuple with the VideoBlob field value
// and a boolean to check if the value has been set.
func (o *VideoData) GetVideoBlobOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VideoBlob, true
}

// SetVideoBlob sets field value
func (o *VideoData) SetVideoBlob(v string) {
	o.VideoBlob = v
}

// GetType returns the Type field value
func (o *VideoData) GetType() DataTypeEnum {
	if o == nil {
		var ret DataTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VideoData) GetTypeOk() (*DataTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VideoData) SetType(v DataTypeEnum) {
	o.Type = v
}

func (o VideoData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["video_blob"] = o.VideoBlob
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableVideoData struct {
	value *VideoData
	isSet bool
}

func (v NullableVideoData) Get() *VideoData {
	return v.value
}

func (v *NullableVideoData) Set(val *VideoData) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoData) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoData(val *VideoData) *NullableVideoData {
	return &NullableVideoData{value: val, isSet: true}
}

func (v NullableVideoData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
