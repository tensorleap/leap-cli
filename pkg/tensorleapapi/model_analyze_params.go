/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.618
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the AnalyzeParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyzeParams{}

// AnalyzeParams struct for AnalyzeParams
type AnalyzeParams struct {
	Type             AnalyzeTypeEnum `json:"type"`
	FromEpoch        float64         `json:"fromEpoch"`
	BatchSize        *float64        `json:"batchSize,omitempty"`
	SampleIdentity   *SampleIdentity `json:"sampleIdentity,omitempty"`
	FromDatasetSlice *DataStateType  `json:"fromDatasetSlice,omitempty"`
	ExtId            string          `json:"extId"`
}

// NewAnalyzeParams instantiates a new AnalyzeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyzeParams(type_ AnalyzeTypeEnum, fromEpoch float64, extId string) *AnalyzeParams {
	this := AnalyzeParams{}
	this.Type = type_
	this.FromEpoch = fromEpoch
	this.ExtId = extId
	return &this
}

// NewAnalyzeParamsWithDefaults instantiates a new AnalyzeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyzeParamsWithDefaults() *AnalyzeParams {
	this := AnalyzeParams{}
	return &this
}

// GetType returns the Type field value
func (o *AnalyzeParams) GetType() AnalyzeTypeEnum {
	if o == nil {
		var ret AnalyzeTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AnalyzeParams) GetTypeOk() (*AnalyzeTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AnalyzeParams) SetType(v AnalyzeTypeEnum) {
	o.Type = v
}

// GetFromEpoch returns the FromEpoch field value
func (o *AnalyzeParams) GetFromEpoch() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.FromEpoch
}

// GetFromEpochOk returns a tuple with the FromEpoch field value
// and a boolean to check if the value has been set.
func (o *AnalyzeParams) GetFromEpochOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromEpoch, true
}

// SetFromEpoch sets field value
func (o *AnalyzeParams) SetFromEpoch(v float64) {
	o.FromEpoch = v
}

// GetBatchSize returns the BatchSize field value if set, zero value otherwise.
func (o *AnalyzeParams) GetBatchSize() float64 {
	if o == nil || IsNil(o.BatchSize) {
		var ret float64
		return ret
	}
	return *o.BatchSize
}

// GetBatchSizeOk returns a tuple with the BatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeParams) GetBatchSizeOk() (*float64, bool) {
	if o == nil || IsNil(o.BatchSize) {
		return nil, false
	}
	return o.BatchSize, true
}

// HasBatchSize returns a boolean if a field has been set.
func (o *AnalyzeParams) HasBatchSize() bool {
	if o != nil && !IsNil(o.BatchSize) {
		return true
	}

	return false
}

// SetBatchSize gets a reference to the given float64 and assigns it to the BatchSize field.
func (o *AnalyzeParams) SetBatchSize(v float64) {
	o.BatchSize = &v
}

// GetSampleIdentity returns the SampleIdentity field value if set, zero value otherwise.
func (o *AnalyzeParams) GetSampleIdentity() SampleIdentity {
	if o == nil || IsNil(o.SampleIdentity) {
		var ret SampleIdentity
		return ret
	}
	return *o.SampleIdentity
}

// GetSampleIdentityOk returns a tuple with the SampleIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeParams) GetSampleIdentityOk() (*SampleIdentity, bool) {
	if o == nil || IsNil(o.SampleIdentity) {
		return nil, false
	}
	return o.SampleIdentity, true
}

// HasSampleIdentity returns a boolean if a field has been set.
func (o *AnalyzeParams) HasSampleIdentity() bool {
	if o != nil && !IsNil(o.SampleIdentity) {
		return true
	}

	return false
}

// SetSampleIdentity gets a reference to the given SampleIdentity and assigns it to the SampleIdentity field.
func (o *AnalyzeParams) SetSampleIdentity(v SampleIdentity) {
	o.SampleIdentity = &v
}

// GetFromDatasetSlice returns the FromDatasetSlice field value if set, zero value otherwise.
func (o *AnalyzeParams) GetFromDatasetSlice() DataStateType {
	if o == nil || IsNil(o.FromDatasetSlice) {
		var ret DataStateType
		return ret
	}
	return *o.FromDatasetSlice
}

// GetFromDatasetSliceOk returns a tuple with the FromDatasetSlice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeParams) GetFromDatasetSliceOk() (*DataStateType, bool) {
	if o == nil || IsNil(o.FromDatasetSlice) {
		return nil, false
	}
	return o.FromDatasetSlice, true
}

// HasFromDatasetSlice returns a boolean if a field has been set.
func (o *AnalyzeParams) HasFromDatasetSlice() bool {
	if o != nil && !IsNil(o.FromDatasetSlice) {
		return true
	}

	return false
}

// SetFromDatasetSlice gets a reference to the given DataStateType and assigns it to the FromDatasetSlice field.
func (o *AnalyzeParams) SetFromDatasetSlice(v DataStateType) {
	o.FromDatasetSlice = &v
}

// GetExtId returns the ExtId field value
func (o *AnalyzeParams) GetExtId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExtId
}

// GetExtIdOk returns a tuple with the ExtId field value
// and a boolean to check if the value has been set.
func (o *AnalyzeParams) GetExtIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtId, true
}

// SetExtId sets field value
func (o *AnalyzeParams) SetExtId(v string) {
	o.ExtId = v
}

func (o AnalyzeParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyzeParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["fromEpoch"] = o.FromEpoch
	if !IsNil(o.BatchSize) {
		toSerialize["batchSize"] = o.BatchSize
	}
	if !IsNil(o.SampleIdentity) {
		toSerialize["sampleIdentity"] = o.SampleIdentity
	}
	if !IsNil(o.FromDatasetSlice) {
		toSerialize["fromDatasetSlice"] = o.FromDatasetSlice
	}
	toSerialize["extId"] = o.ExtId
	return toSerialize, nil
}

type NullableAnalyzeParams struct {
	value *AnalyzeParams
	isSet bool
}

func (v NullableAnalyzeParams) Get() *AnalyzeParams {
	return v.value
}

func (v *NullableAnalyzeParams) Set(val *AnalyzeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyzeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyzeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyzeParams(val *AnalyzeParams) *NullableAnalyzeParams {
	return &NullableAnalyzeParams{value: val, isSet: true}
}

func (v NullableAnalyzeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyzeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
