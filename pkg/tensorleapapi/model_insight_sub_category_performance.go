/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.638
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// InsightSubCategoryPerformance the model 'InsightSubCategoryPerformance'
type InsightSubCategoryPerformance string

// List of InsightSubCategoryPerformance
const (
	INSIGHTSUBCATEGORYPERFORMANCE_LOW_PERFORMANCE InsightSubCategoryPerformance = "low_performance"
	INSIGHTSUBCATEGORYPERFORMANCE_OVER_FIT        InsightSubCategoryPerformance = "over_fit"
)

// All allowed values of InsightSubCategoryPerformance enum
var AllowedInsightSubCategoryPerformanceEnumValues = []InsightSubCategoryPerformance{
	"low_performance",
	"over_fit",
}

func (v *InsightSubCategoryPerformance) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InsightSubCategoryPerformance(value)
	for _, existing := range AllowedInsightSubCategoryPerformanceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InsightSubCategoryPerformance", value)
}

// NewInsightSubCategoryPerformanceFromValue returns a pointer to a valid InsightSubCategoryPerformance
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInsightSubCategoryPerformanceFromValue(v string) (*InsightSubCategoryPerformance, error) {
	ev := InsightSubCategoryPerformance(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InsightSubCategoryPerformance: valid values are %v", v, AllowedInsightSubCategoryPerformanceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InsightSubCategoryPerformance) IsValid() bool {
	for _, existing := range AllowedInsightSubCategoryPerformanceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InsightSubCategoryPerformance value
func (v InsightSubCategoryPerformance) Ptr() *InsightSubCategoryPerformance {
	return &v
}

type NullableInsightSubCategoryPerformance struct {
	value *InsightSubCategoryPerformance
	isSet bool
}

func (v NullableInsightSubCategoryPerformance) Get() *InsightSubCategoryPerformance {
	return v.value
}

func (v *NullableInsightSubCategoryPerformance) Set(val *InsightSubCategoryPerformance) {
	v.value = val
	v.isSet = true
}

func (v NullableInsightSubCategoryPerformance) IsSet() bool {
	return v.isSet
}

func (v *NullableInsightSubCategoryPerformance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsightSubCategoryPerformance(val *InsightSubCategoryPerformance) *NullableInsightSubCategoryPerformance {
	return &NullableInsightSubCategoryPerformance{value: val, isSet: true}
}

func (v NullableInsightSubCategoryPerformance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsightSubCategoryPerformance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
