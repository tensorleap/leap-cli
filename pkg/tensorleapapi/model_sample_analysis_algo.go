/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.607
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// SampleAnalysisAlgo the model 'SampleAnalysisAlgo'
type SampleAnalysisAlgo string

// List of SampleAnalysisAlgo
const (
	SAMPLEANALYSISALGO_FOCUS_LAYER_CAM SampleAnalysisAlgo = "focus_layer_cam"
	SAMPLEANALYSISALGO_LAYER_CAM       SampleAnalysisAlgo = "layer_cam"
	SAMPLEANALYSISALGO_GRAD_CAM        SampleAnalysisAlgo = "grad_cam"
)

// All allowed values of SampleAnalysisAlgo enum
var AllowedSampleAnalysisAlgoEnumValues = []SampleAnalysisAlgo{
	"focus_layer_cam",
	"layer_cam",
	"grad_cam",
}

func (v *SampleAnalysisAlgo) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SampleAnalysisAlgo(value)
	for _, existing := range AllowedSampleAnalysisAlgoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SampleAnalysisAlgo", value)
}

// NewSampleAnalysisAlgoFromValue returns a pointer to a valid SampleAnalysisAlgo
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSampleAnalysisAlgoFromValue(v string) (*SampleAnalysisAlgo, error) {
	ev := SampleAnalysisAlgo(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SampleAnalysisAlgo: valid values are %v", v, AllowedSampleAnalysisAlgoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SampleAnalysisAlgo) IsValid() bool {
	for _, existing := range AllowedSampleAnalysisAlgoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SampleAnalysisAlgo value
func (v SampleAnalysisAlgo) Ptr() *SampleAnalysisAlgo {
	return &v
}

type NullableSampleAnalysisAlgo struct {
	value *SampleAnalysisAlgo
	isSet bool
}

func (v NullableSampleAnalysisAlgo) Get() *SampleAnalysisAlgo {
	return v.value
}

func (v *NullableSampleAnalysisAlgo) Set(val *SampleAnalysisAlgo) {
	v.value = val
	v.isSet = true
}

func (v NullableSampleAnalysisAlgo) IsSet() bool {
	return v.isSet
}

func (v *NullableSampleAnalysisAlgo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSampleAnalysisAlgo(val *SampleAnalysisAlgo) *NullableSampleAnalysisAlgo {
	return &NullableSampleAnalysisAlgo{value: val, isSet: true}
}

func (v NullableSampleAnalysisAlgo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSampleAnalysisAlgo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
