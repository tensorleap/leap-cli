/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.618
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// UploadModelFileType the model 'UploadModelFileType'
type UploadModelFileType string

// List of UploadModelFileType
const (
	UPLOADMODELFILETYPE_ONNX UploadModelFileType = "onnx"
	UPLOADMODELFILETYPE_H5   UploadModelFileType = "h5"
)

// All allowed values of UploadModelFileType enum
var AllowedUploadModelFileTypeEnumValues = []UploadModelFileType{
	"onnx",
	"h5",
}

func (v *UploadModelFileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UploadModelFileType(value)
	for _, existing := range AllowedUploadModelFileTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UploadModelFileType", value)
}

// NewUploadModelFileTypeFromValue returns a pointer to a valid UploadModelFileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUploadModelFileTypeFromValue(v string) (*UploadModelFileType, error) {
	ev := UploadModelFileType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UploadModelFileType: valid values are %v", v, AllowedUploadModelFileTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UploadModelFileType) IsValid() bool {
	for _, existing := range AllowedUploadModelFileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UploadModelFileType value
func (v UploadModelFileType) Ptr() *UploadModelFileType {
	return &v
}

type NullableUploadModelFileType struct {
	value *UploadModelFileType
	isSet bool
}

func (v NullableUploadModelFileType) Get() *UploadModelFileType {
	return v.value
}

func (v *NullableUploadModelFileType) Set(val *UploadModelFileType) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadModelFileType) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadModelFileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadModelFileType(val *UploadModelFileType) *NullableUploadModelFileType {
	return &NullableUploadModelFileType{value: val, isSet: true}
}

func (v NullableUploadModelFileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadModelFileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
