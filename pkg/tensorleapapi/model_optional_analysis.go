/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.638
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// OptionalAnalysis the model 'OptionalAnalysis'
type OptionalAnalysis string

// List of OptionalAnalysis
const (
	OPTIONALANALYSIS_REPRESENTATION_ALL  OptionalAnalysis = "representation all"
	OPTIONALANALYSIS_DUPLICATION_INSIGHT OptionalAnalysis = "duplication insight"
)

// All allowed values of OptionalAnalysis enum
var AllowedOptionalAnalysisEnumValues = []OptionalAnalysis{
	"representation all",
	"duplication insight",
}

func (v *OptionalAnalysis) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OptionalAnalysis(value)
	for _, existing := range AllowedOptionalAnalysisEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OptionalAnalysis", value)
}

// NewOptionalAnalysisFromValue returns a pointer to a valid OptionalAnalysis
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOptionalAnalysisFromValue(v string) (*OptionalAnalysis, error) {
	ev := OptionalAnalysis(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OptionalAnalysis: valid values are %v", v, AllowedOptionalAnalysisEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OptionalAnalysis) IsValid() bool {
	for _, existing := range AllowedOptionalAnalysisEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OptionalAnalysis value
func (v OptionalAnalysis) Ptr() *OptionalAnalysis {
	return &v
}

type NullableOptionalAnalysis struct {
	value *OptionalAnalysis
	isSet bool
}

func (v NullableOptionalAnalysis) Get() *OptionalAnalysis {
	return v.value
}

func (v *NullableOptionalAnalysis) Set(val *OptionalAnalysis) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionalAnalysis) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionalAnalysis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionalAnalysis(val *OptionalAnalysis) *NullableOptionalAnalysis {
	return &NullableOptionalAnalysis{value: val, isSet: true}
}

func (v NullableOptionalAnalysis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionalAnalysis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
