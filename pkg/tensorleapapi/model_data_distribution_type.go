/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.423
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// DataDistributionType the model 'DataDistributionType'
type DataDistributionType string

// List of DataDistributionType
const (
	DATADISTRIBUTIONTYPE_DISTINCT   DataDistributionType = "distinct"
	DATADISTRIBUTIONTYPE_CONTINUOUS DataDistributionType = "continuous"
)

// All allowed values of DataDistributionType enum
var AllowedDataDistributionTypeEnumValues = []DataDistributionType{
	"distinct",
	"continuous",
}

func (v *DataDistributionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataDistributionType(value)
	for _, existing := range AllowedDataDistributionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataDistributionType", value)
}

// NewDataDistributionTypeFromValue returns a pointer to a valid DataDistributionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataDistributionTypeFromValue(v string) (*DataDistributionType, error) {
	ev := DataDistributionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataDistributionType: valid values are %v", v, AllowedDataDistributionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataDistributionType) IsValid() bool {
	for _, existing := range AllowedDataDistributionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataDistributionType value
func (v DataDistributionType) Ptr() *DataDistributionType {
	return &v
}

type NullableDataDistributionType struct {
	value *DataDistributionType
	isSet bool
}

func (v NullableDataDistributionType) Get() *DataDistributionType {
	return v.value
}

func (v *NullableDataDistributionType) Set(val *DataDistributionType) {
	v.value = val
	v.isSet = true
}

func (v NullableDataDistributionType) IsSet() bool {
	return v.isSet
}

func (v *NullableDataDistributionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataDistributionType(val *DataDistributionType) *NullableDataDistributionType {
	return &NullableDataDistributionType{value: val, isSet: true}
}

func (v NullableDataDistributionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataDistributionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
