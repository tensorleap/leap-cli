/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.526
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the SchemaWithKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaWithKey{}

// SchemaWithKey struct for SchemaWithKey
type SchemaWithKey struct {
	KeyName string        `json:"keyName"`
	Schema  SettingSchema `json:"schema"`
}

// NewSchemaWithKey instantiates a new SchemaWithKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaWithKey(keyName string, schema SettingSchema) *SchemaWithKey {
	this := SchemaWithKey{}
	this.KeyName = keyName
	this.Schema = schema
	return &this
}

// NewSchemaWithKeyWithDefaults instantiates a new SchemaWithKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaWithKeyWithDefaults() *SchemaWithKey {
	this := SchemaWithKey{}
	return &this
}

// GetKeyName returns the KeyName field value
func (o *SchemaWithKey) GetKeyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value
// and a boolean to check if the value has been set.
func (o *SchemaWithKey) GetKeyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyName, true
}

// SetKeyName sets field value
func (o *SchemaWithKey) SetKeyName(v string) {
	o.KeyName = v
}

// GetSchema returns the Schema field value
func (o *SchemaWithKey) GetSchema() SettingSchema {
	if o == nil {
		var ret SettingSchema
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *SchemaWithKey) GetSchemaOk() (*SettingSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schema, true
}

// SetSchema sets field value
func (o *SchemaWithKey) SetSchema(v SettingSchema) {
	o.Schema = v
}

func (o SchemaWithKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaWithKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keyName"] = o.KeyName
	toSerialize["schema"] = o.Schema
	return toSerialize, nil
}

type NullableSchemaWithKey struct {
	value *SchemaWithKey
	isSet bool
}

func (v NullableSchemaWithKey) Get() *SchemaWithKey {
	return v.value
}

func (v *NullableSchemaWithKey) Set(val *SchemaWithKey) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaWithKey) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaWithKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaWithKey(val *SchemaWithKey) *NullableSchemaWithKey {
	return &NullableSchemaWithKey{value: val, isSet: true}
}

func (v NullableSchemaWithKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaWithKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
