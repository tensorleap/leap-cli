/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.526
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// InsightSubCategoryDSCuration the model 'InsightSubCategoryDSCuration'
type InsightSubCategoryDSCuration string

// List of InsightSubCategoryDSCuration
const (
	INSIGHTSUBCATEGORYDSCURATION_UNDER_PRESENTATION InsightSubCategoryDSCuration = "under_presentation"
	INSIGHTSUBCATEGORYDSCURATION_OVER_PRESENTATION  InsightSubCategoryDSCuration = "over_presentation"
	INSIGHTSUBCATEGORYDSCURATION_DATA_LEAKAGE       InsightSubCategoryDSCuration = "data_leakage"
)

// All allowed values of InsightSubCategoryDSCuration enum
var AllowedInsightSubCategoryDSCurationEnumValues = []InsightSubCategoryDSCuration{
	"under_presentation",
	"over_presentation",
	"data_leakage",
}

func (v *InsightSubCategoryDSCuration) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InsightSubCategoryDSCuration(value)
	for _, existing := range AllowedInsightSubCategoryDSCurationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InsightSubCategoryDSCuration", value)
}

// NewInsightSubCategoryDSCurationFromValue returns a pointer to a valid InsightSubCategoryDSCuration
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInsightSubCategoryDSCurationFromValue(v string) (*InsightSubCategoryDSCuration, error) {
	ev := InsightSubCategoryDSCuration(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InsightSubCategoryDSCuration: valid values are %v", v, AllowedInsightSubCategoryDSCurationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InsightSubCategoryDSCuration) IsValid() bool {
	for _, existing := range AllowedInsightSubCategoryDSCurationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InsightSubCategoryDSCuration value
func (v InsightSubCategoryDSCuration) Ptr() *InsightSubCategoryDSCuration {
	return &v
}

type NullableInsightSubCategoryDSCuration struct {
	value *InsightSubCategoryDSCuration
	isSet bool
}

func (v NullableInsightSubCategoryDSCuration) Get() *InsightSubCategoryDSCuration {
	return v.value
}

func (v *NullableInsightSubCategoryDSCuration) Set(val *InsightSubCategoryDSCuration) {
	v.value = val
	v.isSet = true
}

func (v NullableInsightSubCategoryDSCuration) IsSet() bool {
	return v.isSet
}

func (v *NullableInsightSubCategoryDSCuration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsightSubCategoryDSCuration(val *InsightSubCategoryDSCuration) *NullableInsightSubCategoryDSCuration {
	return &NullableInsightSubCategoryDSCuration{value: val, isSet: true}
}

func (v NullableInsightSubCategoryDSCuration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsightSubCategoryDSCuration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
