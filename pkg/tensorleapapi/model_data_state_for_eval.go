/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.364
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// DataStateForEval the model 'DataStateForEval'
type DataStateForEval string

// List of DataStateForEval
const (
	DATASTATEFOREVAL_TRAINING DataStateForEval = "training"
	DATASTATEFOREVAL_VALIDATION DataStateForEval = "validation"
	DATASTATEFOREVAL_TEST DataStateForEval = "test"
)

// All allowed values of DataStateForEval enum
var AllowedDataStateForEvalEnumValues = []DataStateForEval{
	"training",
	"validation",
	"test",
}

func (v *DataStateForEval) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataStateForEval(value)
	for _, existing := range AllowedDataStateForEvalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataStateForEval", value)
}

// NewDataStateForEvalFromValue returns a pointer to a valid DataStateForEval
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataStateForEvalFromValue(v string) (*DataStateForEval, error) {
	ev := DataStateForEval(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataStateForEval: valid values are %v", v, AllowedDataStateForEvalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataStateForEval) IsValid() bool {
	for _, existing := range AllowedDataStateForEvalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataStateForEval value
func (v DataStateForEval) Ptr() *DataStateForEval {
	return &v
}

type NullableDataStateForEval struct {
	value *DataStateForEval
	isSet bool
}

func (v NullableDataStateForEval) Get() *DataStateForEval {
	return v.value
}

func (v *NullableDataStateForEval) Set(val *DataStateForEval) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStateForEval) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStateForEval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStateForEval(val *DataStateForEval) *NullableDataStateForEval {
	return &NullableDataStateForEval{value: val, isSet: true}
}

func (v NullableDataStateForEval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStateForEval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

