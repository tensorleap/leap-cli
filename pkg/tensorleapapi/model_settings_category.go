/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.628
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// SettingsCategory the model 'SettingsCategory'
type SettingsCategory string

// List of SettingsCategory
const (
	SETTINGSCATEGORY_EVALUATION_MAIN    SettingsCategory = "EVALUATION_MAIN"
	SETTINGSCATEGORY_EVALUATION_WORKERS SettingsCategory = "EVALUATION_WORKERS"
	SETTINGSCATEGORY_POP_EXPLORATION    SettingsCategory = "POP_EXPLORATION"
	SETTINGSCATEGORY_GENERAL            SettingsCategory = "GENERAL"
)

// All allowed values of SettingsCategory enum
var AllowedSettingsCategoryEnumValues = []SettingsCategory{
	"EVALUATION_MAIN",
	"EVALUATION_WORKERS",
	"POP_EXPLORATION",
	"GENERAL",
}

func (v *SettingsCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SettingsCategory(value)
	for _, existing := range AllowedSettingsCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SettingsCategory", value)
}

// NewSettingsCategoryFromValue returns a pointer to a valid SettingsCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSettingsCategoryFromValue(v string) (*SettingsCategory, error) {
	ev := SettingsCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SettingsCategory: valid values are %v", v, AllowedSettingsCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SettingsCategory) IsValid() bool {
	for _, existing := range AllowedSettingsCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SettingsCategory value
func (v SettingsCategory) Ptr() *SettingsCategory {
	return &v
}

type NullableSettingsCategory struct {
	value *SettingsCategory
	isSet bool
}

func (v NullableSettingsCategory) Get() *SettingsCategory {
	return v.value
}

func (v *NullableSettingsCategory) Set(val *SettingsCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsCategory(val *SettingsCategory) *NullableSettingsCategory {
	return &NullableSettingsCategory{value: val, isSet: true}
}

func (v NullableSettingsCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
