/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.607
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the AggFunc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggFunc{}

// AggFunc struct for AggFunc
type AggFunc struct {
	Field       string            `json:"field"`
	Aggregation AggregationMethod `json:"aggregation"`
}

// NewAggFunc instantiates a new AggFunc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggFunc(field string, aggregation AggregationMethod) *AggFunc {
	this := AggFunc{}
	this.Field = field
	this.Aggregation = aggregation
	return &this
}

// NewAggFuncWithDefaults instantiates a new AggFunc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggFuncWithDefaults() *AggFunc {
	this := AggFunc{}
	return &this
}

// GetField returns the Field field value
func (o *AggFunc) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *AggFunc) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *AggFunc) SetField(v string) {
	o.Field = v
}

// GetAggregation returns the Aggregation field value
func (o *AggFunc) GetAggregation() AggregationMethod {
	if o == nil {
		var ret AggregationMethod
		return ret
	}

	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value
// and a boolean to check if the value has been set.
func (o *AggFunc) GetAggregationOk() (*AggregationMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregation, true
}

// SetAggregation sets field value
func (o *AggFunc) SetAggregation(v AggregationMethod) {
	o.Aggregation = v
}

func (o AggFunc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggFunc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["aggregation"] = o.Aggregation
	return toSerialize, nil
}

type NullableAggFunc struct {
	value *AggFunc
	isSet bool
}

func (v NullableAggFunc) Get() *AggFunc {
	return v.value
}

func (v *NullableAggFunc) Set(val *AggFunc) {
	v.value = val
	v.isSet = true
}

func (v NullableAggFunc) IsSet() bool {
	return v.isSet
}

func (v *NullableAggFunc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggFunc(val *AggFunc) *NullableAggFunc {
	return &NullableAggFunc{value: val, isSet: true}
}

func (v NullableAggFunc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggFunc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
