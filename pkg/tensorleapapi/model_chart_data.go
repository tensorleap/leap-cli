/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.628
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the ChartData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChartData{}

// ChartData struct for ChartData
type ChartData struct {
	HorizontalKey *SplitValue         `json:"horizontalKey,omitempty"`
	VerticalKey   *SplitValue         `json:"verticalKey,omitempty"`
	Data          GenericDataResponse `json:"data"`
}

// NewChartData instantiates a new ChartData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartData(data GenericDataResponse) *ChartData {
	this := ChartData{}
	this.Data = data
	return &this
}

// NewChartDataWithDefaults instantiates a new ChartData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartDataWithDefaults() *ChartData {
	this := ChartData{}
	return &this
}

// GetHorizontalKey returns the HorizontalKey field value if set, zero value otherwise.
func (o *ChartData) GetHorizontalKey() SplitValue {
	if o == nil || IsNil(o.HorizontalKey) {
		var ret SplitValue
		return ret
	}
	return *o.HorizontalKey
}

// GetHorizontalKeyOk returns a tuple with the HorizontalKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartData) GetHorizontalKeyOk() (*SplitValue, bool) {
	if o == nil || IsNil(o.HorizontalKey) {
		return nil, false
	}
	return o.HorizontalKey, true
}

// HasHorizontalKey returns a boolean if a field has been set.
func (o *ChartData) HasHorizontalKey() bool {
	if o != nil && !IsNil(o.HorizontalKey) {
		return true
	}

	return false
}

// SetHorizontalKey gets a reference to the given SplitValue and assigns it to the HorizontalKey field.
func (o *ChartData) SetHorizontalKey(v SplitValue) {
	o.HorizontalKey = &v
}

// GetVerticalKey returns the VerticalKey field value if set, zero value otherwise.
func (o *ChartData) GetVerticalKey() SplitValue {
	if o == nil || IsNil(o.VerticalKey) {
		var ret SplitValue
		return ret
	}
	return *o.VerticalKey
}

// GetVerticalKeyOk returns a tuple with the VerticalKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartData) GetVerticalKeyOk() (*SplitValue, bool) {
	if o == nil || IsNil(o.VerticalKey) {
		return nil, false
	}
	return o.VerticalKey, true
}

// HasVerticalKey returns a boolean if a field has been set.
func (o *ChartData) HasVerticalKey() bool {
	if o != nil && !IsNil(o.VerticalKey) {
		return true
	}

	return false
}

// SetVerticalKey gets a reference to the given SplitValue and assigns it to the VerticalKey field.
func (o *ChartData) SetVerticalKey(v SplitValue) {
	o.VerticalKey = &v
}

// GetData returns the Data field value
func (o *ChartData) GetData() GenericDataResponse {
	if o == nil {
		var ret GenericDataResponse
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ChartData) GetDataOk() (*GenericDataResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ChartData) SetData(v GenericDataResponse) {
	o.Data = v
}

func (o ChartData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChartData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HorizontalKey) {
		toSerialize["horizontalKey"] = o.HorizontalKey
	}
	if !IsNil(o.VerticalKey) {
		toSerialize["verticalKey"] = o.VerticalKey
	}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableChartData struct {
	value *ChartData
	isSet bool
}

func (v NullableChartData) Get() *ChartData {
	return v.value
}

func (v *NullableChartData) Set(val *ChartData) {
	v.value = val
	v.isSet = true
}

func (v NullableChartData) IsSet() bool {
	return v.isSet
}

func (v *NullableChartData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartData(val *ChartData) *NullableChartData {
	return &NullableChartData{value: val, isSet: true}
}

func (v NullableChartData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
