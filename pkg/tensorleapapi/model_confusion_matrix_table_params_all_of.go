/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.592
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the ConfusionMatrixTableParamsAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfusionMatrixTableParamsAllOf{}

// ConfusionMatrixTableParamsAllOf struct for ConfusionMatrixTableParamsAllOf
type ConfusionMatrixTableParamsAllOf struct {
	SplitByLabelOrder *OrderType `json:"splitByLabelOrder,omitempty"`
	SplitByLabel      bool       `json:"splitByLabel"`
	FilterLabels      []string   `json:"filterLabels,omitempty"`
	Threshold         *float64   `json:"threshold,omitempty"`
}

// NewConfusionMatrixTableParamsAllOf instantiates a new ConfusionMatrixTableParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfusionMatrixTableParamsAllOf(splitByLabel bool) *ConfusionMatrixTableParamsAllOf {
	this := ConfusionMatrixTableParamsAllOf{}
	this.SplitByLabel = splitByLabel
	return &this
}

// NewConfusionMatrixTableParamsAllOfWithDefaults instantiates a new ConfusionMatrixTableParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfusionMatrixTableParamsAllOfWithDefaults() *ConfusionMatrixTableParamsAllOf {
	this := ConfusionMatrixTableParamsAllOf{}
	return &this
}

// GetSplitByLabelOrder returns the SplitByLabelOrder field value if set, zero value otherwise.
func (o *ConfusionMatrixTableParamsAllOf) GetSplitByLabelOrder() OrderType {
	if o == nil || IsNil(o.SplitByLabelOrder) {
		var ret OrderType
		return ret
	}
	return *o.SplitByLabelOrder
}

// GetSplitByLabelOrderOk returns a tuple with the SplitByLabelOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfusionMatrixTableParamsAllOf) GetSplitByLabelOrderOk() (*OrderType, bool) {
	if o == nil || IsNil(o.SplitByLabelOrder) {
		return nil, false
	}
	return o.SplitByLabelOrder, true
}

// HasSplitByLabelOrder returns a boolean if a field has been set.
func (o *ConfusionMatrixTableParamsAllOf) HasSplitByLabelOrder() bool {
	if o != nil && !IsNil(o.SplitByLabelOrder) {
		return true
	}

	return false
}

// SetSplitByLabelOrder gets a reference to the given OrderType and assigns it to the SplitByLabelOrder field.
func (o *ConfusionMatrixTableParamsAllOf) SetSplitByLabelOrder(v OrderType) {
	o.SplitByLabelOrder = &v
}

// GetSplitByLabel returns the SplitByLabel field value
func (o *ConfusionMatrixTableParamsAllOf) GetSplitByLabel() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SplitByLabel
}

// GetSplitByLabelOk returns a tuple with the SplitByLabel field value
// and a boolean to check if the value has been set.
func (o *ConfusionMatrixTableParamsAllOf) GetSplitByLabelOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SplitByLabel, true
}

// SetSplitByLabel sets field value
func (o *ConfusionMatrixTableParamsAllOf) SetSplitByLabel(v bool) {
	o.SplitByLabel = v
}

// GetFilterLabels returns the FilterLabels field value if set, zero value otherwise.
func (o *ConfusionMatrixTableParamsAllOf) GetFilterLabels() []string {
	if o == nil || IsNil(o.FilterLabels) {
		var ret []string
		return ret
	}
	return o.FilterLabels
}

// GetFilterLabelsOk returns a tuple with the FilterLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfusionMatrixTableParamsAllOf) GetFilterLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterLabels) {
		return nil, false
	}
	return o.FilterLabels, true
}

// HasFilterLabels returns a boolean if a field has been set.
func (o *ConfusionMatrixTableParamsAllOf) HasFilterLabels() bool {
	if o != nil && !IsNil(o.FilterLabels) {
		return true
	}

	return false
}

// SetFilterLabels gets a reference to the given []string and assigns it to the FilterLabels field.
func (o *ConfusionMatrixTableParamsAllOf) SetFilterLabels(v []string) {
	o.FilterLabels = v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *ConfusionMatrixTableParamsAllOf) GetThreshold() float64 {
	if o == nil || IsNil(o.Threshold) {
		var ret float64
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfusionMatrixTableParamsAllOf) GetThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *ConfusionMatrixTableParamsAllOf) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float64 and assigns it to the Threshold field.
func (o *ConfusionMatrixTableParamsAllOf) SetThreshold(v float64) {
	o.Threshold = &v
}

func (o ConfusionMatrixTableParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfusionMatrixTableParamsAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SplitByLabelOrder) {
		toSerialize["splitByLabelOrder"] = o.SplitByLabelOrder
	}
	toSerialize["splitByLabel"] = o.SplitByLabel
	if !IsNil(o.FilterLabels) {
		toSerialize["filterLabels"] = o.FilterLabels
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	return toSerialize, nil
}

type NullableConfusionMatrixTableParamsAllOf struct {
	value *ConfusionMatrixTableParamsAllOf
	isSet bool
}

func (v NullableConfusionMatrixTableParamsAllOf) Get() *ConfusionMatrixTableParamsAllOf {
	return v.value
}

func (v *NullableConfusionMatrixTableParamsAllOf) Set(val *ConfusionMatrixTableParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableConfusionMatrixTableParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableConfusionMatrixTableParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfusionMatrixTableParamsAllOf(val *ConfusionMatrixTableParamsAllOf) *NullableConfusionMatrixTableParamsAllOf {
	return &NullableConfusionMatrixTableParamsAllOf{value: val, isSet: true}
}

func (v NullableConfusionMatrixTableParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfusionMatrixTableParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
