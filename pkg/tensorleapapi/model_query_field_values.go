/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.618
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the QueryFieldValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryFieldValues{}

// QueryFieldValues struct for QueryFieldValues
type QueryFieldValues struct {
	Page  *float64        `json:"page,omitempty"`
	Size  *float64        `json:"size,omitempty"`
	Type  string          `json:"type"`
	Query *NumberOrString `json:"query,omitempty"`
	Field string          `json:"field"`
}

// NewQueryFieldValues instantiates a new QueryFieldValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryFieldValues(type_ string, field string) *QueryFieldValues {
	this := QueryFieldValues{}
	this.Type = type_
	this.Field = field
	return &this
}

// NewQueryFieldValuesWithDefaults instantiates a new QueryFieldValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryFieldValuesWithDefaults() *QueryFieldValues {
	this := QueryFieldValues{}
	return &this
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *QueryFieldValues) GetPage() float64 {
	if o == nil || IsNil(o.Page) {
		var ret float64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFieldValues) GetPageOk() (*float64, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *QueryFieldValues) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given float64 and assigns it to the Page field.
func (o *QueryFieldValues) SetPage(v float64) {
	o.Page = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *QueryFieldValues) GetSize() float64 {
	if o == nil || IsNil(o.Size) {
		var ret float64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFieldValues) GetSizeOk() (*float64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *QueryFieldValues) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given float64 and assigns it to the Size field.
func (o *QueryFieldValues) SetSize(v float64) {
	o.Size = &v
}

// GetType returns the Type field value
func (o *QueryFieldValues) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *QueryFieldValues) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *QueryFieldValues) SetType(v string) {
	o.Type = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *QueryFieldValues) GetQuery() NumberOrString {
	if o == nil || IsNil(o.Query) {
		var ret NumberOrString
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryFieldValues) GetQueryOk() (*NumberOrString, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *QueryFieldValues) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given NumberOrString and assigns it to the Query field.
func (o *QueryFieldValues) SetQuery(v NumberOrString) {
	o.Query = &v
}

// GetField returns the Field field value
func (o *QueryFieldValues) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *QueryFieldValues) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *QueryFieldValues) SetField(v string) {
	o.Field = v
}

func (o QueryFieldValues) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryFieldValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	toSerialize["field"] = o.Field
	return toSerialize, nil
}

type NullableQueryFieldValues struct {
	value *QueryFieldValues
	isSet bool
}

func (v NullableQueryFieldValues) Get() *QueryFieldValues {
	return v.value
}

func (v *NullableQueryFieldValues) Set(val *QueryFieldValues) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryFieldValues) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryFieldValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryFieldValues(val *QueryFieldValues) *NullableQueryFieldValues {
	return &NullableQueryFieldValues{value: val, isSet: true}
}

func (v NullableQueryFieldValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryFieldValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
