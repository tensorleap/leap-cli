/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.638
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the UpdateDatasetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDatasetParams{}

// UpdateDatasetParams struct for UpdateDatasetParams
type UpdateDatasetParams struct {
	DatasetId string `json:"datasetId"`
	Name      string `json:"name"`
	Pippin    *bool  `json:"pippin,omitempty"`
}

// NewUpdateDatasetParams instantiates a new UpdateDatasetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDatasetParams(datasetId string, name string) *UpdateDatasetParams {
	this := UpdateDatasetParams{}
	this.DatasetId = datasetId
	this.Name = name
	return &this
}

// NewUpdateDatasetParamsWithDefaults instantiates a new UpdateDatasetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDatasetParamsWithDefaults() *UpdateDatasetParams {
	this := UpdateDatasetParams{}
	return &this
}

// GetDatasetId returns the DatasetId field value
func (o *UpdateDatasetParams) GetDatasetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatasetId
}

// GetDatasetIdOk returns a tuple with the DatasetId field value
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetDatasetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatasetId, true
}

// SetDatasetId sets field value
func (o *UpdateDatasetParams) SetDatasetId(v string) {
	o.DatasetId = v
}

// GetName returns the Name field value
func (o *UpdateDatasetParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateDatasetParams) SetName(v string) {
	o.Name = v
}

// GetPippin returns the Pippin field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetPippin() bool {
	if o == nil || IsNil(o.Pippin) {
		var ret bool
		return ret
	}
	return *o.Pippin
}

// GetPippinOk returns a tuple with the Pippin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetPippinOk() (*bool, bool) {
	if o == nil || IsNil(o.Pippin) {
		return nil, false
	}
	return o.Pippin, true
}

// HasPippin returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasPippin() bool {
	if o != nil && !IsNil(o.Pippin) {
		return true
	}

	return false
}

// SetPippin gets a reference to the given bool and assigns it to the Pippin field.
func (o *UpdateDatasetParams) SetPippin(v bool) {
	o.Pippin = &v
}

func (o UpdateDatasetParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDatasetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datasetId"] = o.DatasetId
	toSerialize["name"] = o.Name
	if !IsNil(o.Pippin) {
		toSerialize["pippin"] = o.Pippin
	}
	return toSerialize, nil
}

type NullableUpdateDatasetParams struct {
	value *UpdateDatasetParams
	isSet bool
}

func (v NullableUpdateDatasetParams) Get() *UpdateDatasetParams {
	return v.value
}

func (v *NullableUpdateDatasetParams) Set(val *UpdateDatasetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDatasetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDatasetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDatasetParams(val *UpdateDatasetParams) *NullableUpdateDatasetParams {
	return &NullableUpdateDatasetParams{value: val, isSet: true}
}

func (v NullableUpdateDatasetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDatasetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
