/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.526
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the HeatmapChart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeatmapChart{}

// HeatmapChart struct for HeatmapChart
type HeatmapChart struct {
	X SplitAgg `json:"x"`
	Y SplitAgg `json:"y"`
}

// NewHeatmapChart instantiates a new HeatmapChart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeatmapChart(x SplitAgg, y SplitAgg) *HeatmapChart {
	this := HeatmapChart{}
	this.X = x
	this.Y = y
	return &this
}

// NewHeatmapChartWithDefaults instantiates a new HeatmapChart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeatmapChartWithDefaults() *HeatmapChart {
	this := HeatmapChart{}
	return &this
}

// GetX returns the X field value
func (o *HeatmapChart) GetX() SplitAgg {
	if o == nil {
		var ret SplitAgg
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *HeatmapChart) GetXOk() (*SplitAgg, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *HeatmapChart) SetX(v SplitAgg) {
	o.X = v
}

// GetY returns the Y field value
func (o *HeatmapChart) GetY() SplitAgg {
	if o == nil {
		var ret SplitAgg
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *HeatmapChart) GetYOk() (*SplitAgg, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *HeatmapChart) SetY(v SplitAgg) {
	o.Y = v
}

func (o HeatmapChart) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeatmapChart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	return toSerialize, nil
}

type NullableHeatmapChart struct {
	value *HeatmapChart
	isSet bool
}

func (v NullableHeatmapChart) Get() *HeatmapChart {
	return v.value
}

func (v *NullableHeatmapChart) Set(val *HeatmapChart) {
	v.value = val
	v.isSet = true
}

func (v NullableHeatmapChart) IsSet() bool {
	return v.isSet
}

func (v *NullableHeatmapChart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeatmapChart(val *HeatmapChart) *NullableHeatmapChart {
	return &NullableHeatmapChart{value: val, isSet: true}
}

func (v NullableHeatmapChart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeatmapChart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
