/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.467
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
)

// checks if the ImageHeatmapData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageHeatmapData{}

// ImageHeatmapData struct for ImageHeatmapData
type ImageHeatmapData struct {
	Blob        string       `json:"blob"`
	HeatmapBlob string       `json:"heatmap_blob"`
	Type        DataTypeEnum `json:"type"`
}

// NewImageHeatmapData instantiates a new ImageHeatmapData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageHeatmapData(blob string, heatmapBlob string, type_ DataTypeEnum) *ImageHeatmapData {
	this := ImageHeatmapData{}
	this.Blob = blob
	this.HeatmapBlob = heatmapBlob
	this.Type = type_
	return &this
}

// NewImageHeatmapDataWithDefaults instantiates a new ImageHeatmapData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageHeatmapDataWithDefaults() *ImageHeatmapData {
	this := ImageHeatmapData{}
	return &this
}

// GetBlob returns the Blob field value
func (o *ImageHeatmapData) GetBlob() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Blob
}

// GetBlobOk returns a tuple with the Blob field value
// and a boolean to check if the value has been set.
func (o *ImageHeatmapData) GetBlobOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blob, true
}

// SetBlob sets field value
func (o *ImageHeatmapData) SetBlob(v string) {
	o.Blob = v
}

// GetHeatmapBlob returns the HeatmapBlob field value
func (o *ImageHeatmapData) GetHeatmapBlob() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HeatmapBlob
}

// GetHeatmapBlobOk returns a tuple with the HeatmapBlob field value
// and a boolean to check if the value has been set.
func (o *ImageHeatmapData) GetHeatmapBlobOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeatmapBlob, true
}

// SetHeatmapBlob sets field value
func (o *ImageHeatmapData) SetHeatmapBlob(v string) {
	o.HeatmapBlob = v
}

// GetType returns the Type field value
func (o *ImageHeatmapData) GetType() DataTypeEnum {
	if o == nil {
		var ret DataTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ImageHeatmapData) GetTypeOk() (*DataTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ImageHeatmapData) SetType(v DataTypeEnum) {
	o.Type = v
}

func (o ImageHeatmapData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageHeatmapData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blob"] = o.Blob
	toSerialize["heatmap_blob"] = o.HeatmapBlob
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableImageHeatmapData struct {
	value *ImageHeatmapData
	isSet bool
}

func (v NullableImageHeatmapData) Get() *ImageHeatmapData {
	return v.value
}

func (v *NullableImageHeatmapData) Set(val *ImageHeatmapData) {
	v.value = val
	v.isSet = true
}

func (v NullableImageHeatmapData) IsSet() bool {
	return v.isSet
}

func (v *NullableImageHeatmapData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageHeatmapData(val *ImageHeatmapData) *NullableImageHeatmapData {
	return &NullableImageHeatmapData{value: val, isSet: true}
}

func (v NullableImageHeatmapData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageHeatmapData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
