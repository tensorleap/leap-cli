/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.557
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// ReductionAlgorithm the model 'ReductionAlgorithm'
type ReductionAlgorithm string

// List of ReductionAlgorithm
const (
	REDUCTIONALGORITHM_TSNE ReductionAlgorithm = "TSNE"
	REDUCTIONALGORITHM_PCA  ReductionAlgorithm = "PCA"
)

// All allowed values of ReductionAlgorithm enum
var AllowedReductionAlgorithmEnumValues = []ReductionAlgorithm{
	"TSNE",
	"PCA",
}

func (v *ReductionAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReductionAlgorithm(value)
	for _, existing := range AllowedReductionAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReductionAlgorithm", value)
}

// NewReductionAlgorithmFromValue returns a pointer to a valid ReductionAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReductionAlgorithmFromValue(v string) (*ReductionAlgorithm, error) {
	ev := ReductionAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReductionAlgorithm: valid values are %v", v, AllowedReductionAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReductionAlgorithm) IsValid() bool {
	for _, existing := range AllowedReductionAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReductionAlgorithm value
func (v ReductionAlgorithm) Ptr() *ReductionAlgorithm {
	return &v
}

type NullableReductionAlgorithm struct {
	value *ReductionAlgorithm
	isSet bool
}

func (v NullableReductionAlgorithm) Get() *ReductionAlgorithm {
	return v.value
}

func (v *NullableReductionAlgorithm) Set(val *ReductionAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableReductionAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableReductionAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReductionAlgorithm(val *ReductionAlgorithm) *NullableReductionAlgorithm {
	return &NullableReductionAlgorithm{value: val, isSet: true}
}

func (v NullableReductionAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReductionAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
