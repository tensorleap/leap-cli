/*
node-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.607
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tensorleapapi

import (
	"encoding/json"
	"fmt"
)

// AnalyticsDashletType the model 'AnalyticsDashletType'
type AnalyticsDashletType string

// List of AnalyticsDashletType
const (
	ANALYTICSDASHLETTYPE_BAR              AnalyticsDashletType = "Bar"
	ANALYTICSDASHLETTYPE_LINE             AnalyticsDashletType = "Line"
	ANALYTICSDASHLETTYPE_AREA             AnalyticsDashletType = "Area"
	ANALYTICSDASHLETTYPE_TABLE            AnalyticsDashletType = "Table"
	ANALYTICSDASHLETTYPE_HEATMAP          AnalyticsDashletType = "Heatmap"
	ANALYTICSDASHLETTYPE_DONUT            AnalyticsDashletType = "Donut"
	ANALYTICSDASHLETTYPE_CONFUSION_MATRIX AnalyticsDashletType = "Confusion Matrix"
)

// All allowed values of AnalyticsDashletType enum
var AllowedAnalyticsDashletTypeEnumValues = []AnalyticsDashletType{
	"Bar",
	"Line",
	"Area",
	"Table",
	"Heatmap",
	"Donut",
	"Confusion Matrix",
}

func (v *AnalyticsDashletType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsDashletType(value)
	for _, existing := range AllowedAnalyticsDashletTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsDashletType", value)
}

// NewAnalyticsDashletTypeFromValue returns a pointer to a valid AnalyticsDashletType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsDashletTypeFromValue(v string) (*AnalyticsDashletType, error) {
	ev := AnalyticsDashletType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsDashletType: valid values are %v", v, AllowedAnalyticsDashletTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsDashletType) IsValid() bool {
	for _, existing := range AllowedAnalyticsDashletTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsDashletType value
func (v AnalyticsDashletType) Ptr() *AnalyticsDashletType {
	return &v
}

type NullableAnalyticsDashletType struct {
	value *AnalyticsDashletType
	isSet bool
}

func (v NullableAnalyticsDashletType) Get() *AnalyticsDashletType {
	return v.value
}

func (v *NullableAnalyticsDashletType) Set(val *AnalyticsDashletType) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsDashletType) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsDashletType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsDashletType(val *AnalyticsDashletType) *NullableAnalyticsDashletType {
	return &NullableAnalyticsDashletType{value: val, isSet: true}
}

func (v NullableAnalyticsDashletType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsDashletType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
